{"ast":null,"code":"var _jsxFileName = \"/Users/julien/Sites/react-ros-robot/src/components/Control.jsx\";\nimport React, { Component } from \"react\";\nimport Takeoff from \"./Buttons/Takeoff\";\nimport Land from \"./Buttons/Land\";\nimport Hold from \"./Buttons/Hold\";\nimport Offboard from \"./Buttons/Offboard\";\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\nimport Config from \"../scripts/config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Control extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isArmed: \"bruh\",\n      mode: \"Auto\"\n    };\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros(); // Using window bc using CDN for ROSLIB and not NPM package\n\n    console.log(this.state.ros); // Changing changing button color according to connection state\n\n    this.state.ros.on(\"connection\", () => {\n      this.setState({\n        connected: true\n      });\n    });\n    this.state.ros.on(\"close\", () => {\n      this.setState({\n        connected: false\n      }); //try to reconnect every 2 seconds\n\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n\n  componentDidMount() {\n    this.getDroneState();\n  }\n\n  getDroneState() {\n    // create a pose subscriber\n    var state_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: \"/mavros/state\",\n      messageType: \"mavros_msgs/State\"\n    });\n    state_subscriber.subscribe(message => {\n      this.setState({\n        isArmed: message.armed\n      });\n    });\n    state_subscriber.subscribe(message => {\n      this.setState({\n        mode: message.armed\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-grid gap-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"mode = \", this.state.mode]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Offboard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Takeoff, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Land, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Hold, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Control;","map":{"version":3,"sources":["/Users/julien/Sites/react-ros-robot/src/components/Control.jsx"],"names":["React","Component","Takeoff","Land","Hold","Offboard","Row","Col","Container","Button","Config","Control","constructor","state","isArmed","mode","init_connection","ros","window","ROSLIB","Ros","console","log","on","setState","connected","setTimeout","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","RECONNECTION_TIMER","componentDidMount","getDroneState","state_subscriber","Topic","name","messageType","subscribe","message","armed","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Takeoff from \"./Buttons/Takeoff\";\nimport Land from \"./Buttons/Land\";\nimport Hold from \"./Buttons/Hold\";\nimport Offboard from \"./Buttons/Offboard\";\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\nimport Config from \"../scripts/config\";\n\nclass Control extends Component {\n  state = { isArmed: \"bruh\", mode: \"Auto\" };\n\n  constructor() {\n    super();\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros(); // Using window bc using CDN for ROSLIB and not NPM package\n    console.log(this.state.ros);\n\n    // Changing changing button color according to connection state\n    this.state.ros.on(\"connection\", () => {\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      this.setState({ connected: false });\n      //try to reconnect every 2 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n\n  componentDidMount() {\n    this.getDroneState();\n  }\n\n  getDroneState() {\n    // create a pose subscriber\n    var state_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: \"/mavros/state\",\n      messageType: \"mavros_msgs/State\",\n    });\n\n    state_subscriber.subscribe((message) => {\n      this.setState({ isArmed: message.armed });\n    });\n\n    state_subscriber.subscribe((message) => {\n      this.setState({ mode: message.armed });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"d-grid gap-2\">\n        <h4>mode = {this.state.mode}</h4>\n        <Row>\n          <Offboard></Offboard>\n        </Row>\n        <Row>\n          <Takeoff></Takeoff>\n        </Row>\n        <Row>\n          <Land></Land>\n        </Row>\n        <Row>\n          <Hold></Hold>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default Control;\n"]},"metadata":{},"sourceType":"module"}