{"ast":null,"code":"var _jsxFileName = \"/Users/julien/Sites/react-ros-robot/src/components/Teleoperation.jsx\";\nimport React, { Component } from \"react\";\nimport Disarm from \"./Buttons/Disarm\";\nimport Arm from \"./Buttons/Arm\";\nimport { Joystick } from \"react-joystick-component\";\nimport { Row, Col, Container } from \"react-bootstrap\";\nimport Config from \"../scripts/config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Teleoperation extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ros: null,\n      isArmed: \"bruh\"\n    };\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros(); // Using window bc using CDN for ROSLIB and not NPM package\n\n    console.log(this.state.ros); // Changing changing button color according to connection state\n\n    this.state.ros.on(\"connection\", () => {\n      this.setState({\n        connected: true\n      });\n    });\n    this.state.ros.on(\"close\", () => {\n      this.setState({\n        connected: false\n      }); //try to reconnect every 2 seconds\n\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n\n  handleMove() {\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros\n    });\n  }\n\n  handleStop() {}\n\n  componentDidMount() {\n    this.getDroneState();\n  }\n\n  getDroneState() {\n    // create a pose subscriber\n    var state_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: \"/mavros/state\",\n      messageType: \"mavros_msgs/State\"\n    });\n    state_subscriber.subscribe(message => {\n      this.setState({\n        isArmed: message.armed\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Teleoperation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          className: \"justify-content-md-center\",\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            children: [\" \", /*#__PURE__*/_jsxDEV(Joystick, {\n              size: 80,\n              sticky: false,\n              baseColor: \"#EEEEEE\",\n              stickColor: \"#BBBBBB\",\n              move: this.handleMove,\n              stop: this.handleStop\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: this.state.isArmed ? /*#__PURE__*/_jsxDEV(Disarm, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 38\n          }, this) : /*#__PURE__*/_jsxDEV(Arm, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 58\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Teleoperation;","map":{"version":3,"sources":["/Users/julien/Sites/react-ros-robot/src/components/Teleoperation.jsx"],"names":["React","Component","Disarm","Arm","Joystick","Row","Col","Container","Config","Teleoperation","constructor","state","ros","isArmed","init_connection","window","ROSLIB","Ros","console","log","on","setState","connected","setTimeout","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","RECONNECTION_TIMER","handleMove","cmd_vel","Topic","handleStop","componentDidMount","getDroneState","state_subscriber","name","messageType","subscribe","message","armed","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Disarm from \"./Buttons/Disarm\";\nimport Arm from \"./Buttons/Arm\";\nimport { Joystick } from \"react-joystick-component\";\nimport { Row, Col, Container } from \"react-bootstrap\";\nimport Config from \"../scripts/config\";\n\nclass Teleoperation extends Component {\n  state = { ros: null, isArmed: \"bruh\" };\n\n  constructor() {\n    super();\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros(); // Using window bc using CDN for ROSLIB and not NPM package\n    console.log(this.state.ros);\n\n    // Changing changing button color according to connection state\n    this.state.ros.on(\"connection\", () => {\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      this.setState({ connected: false });\n      //try to reconnect every 2 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n\n  handleMove() {\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n    });\n  }\n  handleStop() {}\n\n  componentDidMount() {\n    this.getDroneState();\n  }\n\n  getDroneState() {\n    // create a pose subscriber\n    var state_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: \"/mavros/state\",\n      messageType: \"mavros_msgs/State\",\n    });\n\n    state_subscriber.subscribe((message) => {\n      this.setState({ isArmed: message.armed });\n    });\n  }\n  render() {\n    return (\n      <div>\n        <h2>Teleoperation</h2>\n        <Container>\n          <Row className=\"justify-content-md-center\">\n            <Col>\n              {\" \"}\n              <Joystick\n                size={80}\n                sticky={false}\n                baseColor=\"#EEEEEE\"\n                stickColor=\"#BBBBBB\"\n                move={this.handleMove}\n                stop={this.handleStop}\n              ></Joystick>\n            </Col>\n          </Row>\n          <Row>{this.state.isArmed ? <Disarm></Disarm> : <Arm></Arm>}</Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Teleoperation;\n"]},"metadata":{},"sourceType":"module"}