{"ast":null,"code":"/**\n * @fileoverview\n * @author David Gossow - dgossow@willowgarage.com\n */\nvar ActionClient = require('../actionlib/ActionClient');\n\nvar Goal = require('../actionlib/Goal');\n\nvar Service = require('../core/Service.js');\n\nvar ServiceRequest = require('../core/ServiceRequest.js');\n\nvar Topic = require('../core/Topic.js');\n\nvar Transform = require('../math/Transform');\n/**\n * A TF Client that listens to TFs from tf2_web_republisher.\n *\n *  @constructor\n *  @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * fixedFrame - the fixed frame, like /base_link\n *   * angularThres - the angular threshold for the TF republisher\n *   * transThres - the translation threshold for the TF republisher\n *   * rate - the rate for the TF republisher\n *   * updateDelay - the time (in ms) to wait after a new subscription\n *                   to update the TF republisher's list of TFs\n *   * topicTimeout - the timeout parameter for the TF republisher\n *   * serverName (optional) - the name of the tf2_web_republisher server\n *   * repubServiceName (optional) - the name of the republish_tfs service (non groovy compatibility mode only)\n *   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t default: '/republish_tfs'\n */\n\n\nfunction TFClient(options) {\n  options = options || {};\n  this.ros = options.ros;\n  this.fixedFrame = options.fixedFrame || '/base_link';\n  this.angularThres = options.angularThres || 2.0;\n  this.transThres = options.transThres || 0.01;\n  this.rate = options.rate || 10.0;\n  this.updateDelay = options.updateDelay || 50;\n  var seconds = options.topicTimeout || 2.0;\n  var secs = Math.floor(seconds);\n  var nsecs = Math.floor((seconds - secs) * 1000000000);\n  this.topicTimeout = {\n    secs: secs,\n    nsecs: nsecs\n  };\n  this.serverName = options.serverName || '/tf2_web_republisher';\n  this.repubServiceName = options.repubServiceName || '/republish_tfs';\n  this.currentGoal = false;\n  this.currentTopic = false;\n  this.frameInfos = {};\n  this.republisherUpdateRequested = false;\n  this._subscribeCB = null;\n  this._isDisposed = false; // Create an Action client\n\n  this.actionClient = new ActionClient({\n    ros: options.ros,\n    serverName: this.serverName,\n    actionName: 'tf2_web_republisher/TFSubscriptionAction',\n    omitStatus: true,\n    omitResult: true\n  }); // Create a Service client\n\n  this.serviceClient = new Service({\n    ros: options.ros,\n    name: this.repubServiceName,\n    serviceType: 'tf2_web_republisher/RepublishTFs'\n  });\n}\n/**\n * Process the incoming TF message and send them out using the callback\n * functions.\n *\n * @param tf - the TF message from the server\n */\n\n\nTFClient.prototype.processTFArray = function (tf) {\n  var that = this;\n  tf.transforms.forEach(function (transform) {\n    var frameID = transform.child_frame_id;\n\n    if (frameID[0] === '/') {\n      frameID = frameID.substring(1);\n    }\n\n    var info = this.frameInfos[frameID];\n\n    if (info) {\n      info.transform = new Transform({\n        translation: transform.transform.translation,\n        rotation: transform.transform.rotation\n      });\n      info.cbs.forEach(function (cb) {\n        cb(info.transform);\n      });\n    }\n  }, this);\n};\n/**\n * Create and send a new goal (or service request) to the tf2_web_republisher\n * based on the current list of TFs.\n */\n\n\nTFClient.prototype.updateGoal = function () {\n  var goalMessage = {\n    source_frames: Object.keys(this.frameInfos),\n    target_frame: this.fixedFrame,\n    angular_thres: this.angularThres,\n    trans_thres: this.transThres,\n    rate: this.rate\n  }; // if we're running in groovy compatibility mode (the default)\n  // then use the action interface to tf2_web_republisher\n\n  if (this.ros.groovyCompatibility) {\n    if (this.currentGoal) {\n      this.currentGoal.cancel();\n    }\n\n    this.currentGoal = new Goal({\n      actionClient: this.actionClient,\n      goalMessage: goalMessage\n    });\n    this.currentGoal.on('feedback', this.processTFArray.bind(this));\n    this.currentGoal.send();\n  } else {\n    // otherwise, use the service interface\n    // The service interface has the same parameters as the action,\n    // plus the timeout\n    goalMessage.timeout = this.topicTimeout;\n    var request = new ServiceRequest(goalMessage);\n    this.serviceClient.callService(request, this.processResponse.bind(this));\n  }\n\n  this.republisherUpdateRequested = false;\n};\n/**\n * Process the service response and subscribe to the tf republisher\n * topic\n *\n * @param response the service response containing the topic name\n */\n\n\nTFClient.prototype.processResponse = function (response) {\n  // Do not setup a topic subscription if already disposed. Prevents a race condition where\n  // The dispose() function is called before the service call receives a response.\n  if (this._isDisposed) {\n    return;\n  } // if we subscribed to a topic before, unsubscribe so\n  // the republisher stops publishing it\n\n\n  if (this.currentTopic) {\n    this.currentTopic.unsubscribe(this._subscribeCB);\n  }\n\n  this.currentTopic = new Topic({\n    ros: this.ros,\n    name: response.topic_name,\n    messageType: 'tf2_web_republisher/TFArray'\n  });\n  this._subscribeCB = this.processTFArray.bind(this);\n  this.currentTopic.subscribe(this._subscribeCB);\n};\n/**\n * Subscribe to the given TF frame.\n *\n * @param frameID - the TF frame to subscribe to\n * @param callback - function with params:\n *   * transform - the transform data\n */\n\n\nTFClient.prototype.subscribe = function (frameID, callback) {\n  // remove leading slash, if it's there\n  if (frameID[0] === '/') {\n    frameID = frameID.substring(1);\n  } // if there is no callback registered for the given frame, create emtpy callback list\n\n\n  if (!this.frameInfos[frameID]) {\n    this.frameInfos[frameID] = {\n      cbs: []\n    };\n\n    if (!this.republisherUpdateRequested) {\n      setTimeout(this.updateGoal.bind(this), this.updateDelay);\n      this.republisherUpdateRequested = true;\n    }\n  } // if we already have a transform, call back immediately\n  else if (this.frameInfos[frameID].transform) {\n    callback(this.frameInfos[frameID].transform);\n  }\n\n  this.frameInfos[frameID].cbs.push(callback);\n};\n/**\n * Unsubscribe from the given TF frame.\n *\n * @param frameID - the TF frame to unsubscribe from\n * @param callback - the callback function to remove\n */\n\n\nTFClient.prototype.unsubscribe = function (frameID, callback) {\n  // remove leading slash, if it's there\n  if (frameID[0] === '/') {\n    frameID = frameID.substring(1);\n  }\n\n  var info = this.frameInfos[frameID];\n\n  for (var cbs = info && info.cbs || [], idx = cbs.length; idx--;) {\n    if (cbs[idx] === callback) {\n      cbs.splice(idx, 1);\n    }\n  }\n\n  if (!callback || cbs.length === 0) {\n    delete this.frameInfos[frameID];\n  }\n};\n/**\n * Unsubscribe and unadvertise all topics associated with this TFClient.\n */\n\n\nTFClient.prototype.dispose = function () {\n  this._isDisposed = true;\n  this.actionClient.dispose();\n\n  if (this.currentTopic) {\n    this.currentTopic.unsubscribe(this._subscribeCB);\n  }\n};\n\nmodule.exports = TFClient;","map":{"version":3,"sources":["/Users/julien/Sites/react-ros-robot/node_modules/roslib/src/tf/TFClient.js"],"names":["ActionClient","require","Goal","Service","ServiceRequest","Topic","Transform","TFClient","options","ros","fixedFrame","angularThres","transThres","rate","updateDelay","seconds","topicTimeout","secs","Math","floor","nsecs","serverName","repubServiceName","currentGoal","currentTopic","frameInfos","republisherUpdateRequested","_subscribeCB","_isDisposed","actionClient","actionName","omitStatus","omitResult","serviceClient","name","serviceType","prototype","processTFArray","tf","that","transforms","forEach","transform","frameID","child_frame_id","substring","info","translation","rotation","cbs","cb","updateGoal","goalMessage","source_frames","Object","keys","target_frame","angular_thres","trans_thres","groovyCompatibility","cancel","on","bind","send","timeout","request","callService","processResponse","response","unsubscribe","topic_name","messageType","subscribe","callback","setTimeout","push","idx","length","splice","dispose","module","exports"],"mappings":"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","sourcesContent":["/**\n * @fileoverview\n * @author David Gossow - dgossow@willowgarage.com\n */\n\nvar ActionClient = require('../actionlib/ActionClient');\nvar Goal = require('../actionlib/Goal');\n\nvar Service = require('../core/Service.js');\nvar ServiceRequest = require('../core/ServiceRequest.js');\nvar Topic = require('../core/Topic.js');\n\nvar Transform = require('../math/Transform');\n\n/**\n * A TF Client that listens to TFs from tf2_web_republisher.\n *\n *  @constructor\n *  @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * fixedFrame - the fixed frame, like /base_link\n *   * angularThres - the angular threshold for the TF republisher\n *   * transThres - the translation threshold for the TF republisher\n *   * rate - the rate for the TF republisher\n *   * updateDelay - the time (in ms) to wait after a new subscription\n *                   to update the TF republisher's list of TFs\n *   * topicTimeout - the timeout parameter for the TF republisher\n *   * serverName (optional) - the name of the tf2_web_republisher server\n *   * repubServiceName (optional) - the name of the republish_tfs service (non groovy compatibility mode only)\n *   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t default: '/republish_tfs'\n */\nfunction TFClient(options) {\n  options = options || {};\n  this.ros = options.ros;\n  this.fixedFrame = options.fixedFrame || '/base_link';\n  this.angularThres = options.angularThres || 2.0;\n  this.transThres = options.transThres || 0.01;\n  this.rate = options.rate || 10.0;\n  this.updateDelay = options.updateDelay || 50;\n  var seconds = options.topicTimeout || 2.0;\n  var secs = Math.floor(seconds);\n  var nsecs = Math.floor((seconds - secs) * 1000000000);\n  this.topicTimeout = {\n    secs: secs,\n    nsecs: nsecs\n  };\n  this.serverName = options.serverName || '/tf2_web_republisher';\n  this.repubServiceName = options.repubServiceName || '/republish_tfs';\n\n  this.currentGoal = false;\n  this.currentTopic = false;\n  this.frameInfos = {};\n  this.republisherUpdateRequested = false;\n  this._subscribeCB = null;\n  this._isDisposed = false;\n\n  // Create an Action client\n  this.actionClient = new ActionClient({\n    ros : options.ros,\n    serverName : this.serverName,\n    actionName : 'tf2_web_republisher/TFSubscriptionAction',\n    omitStatus : true,\n    omitResult : true\n  });\n\n  // Create a Service client\n  this.serviceClient = new Service({\n    ros: options.ros,\n    name: this.repubServiceName,\n    serviceType: 'tf2_web_republisher/RepublishTFs'\n  });\n}\n\n/**\n * Process the incoming TF message and send them out using the callback\n * functions.\n *\n * @param tf - the TF message from the server\n */\nTFClient.prototype.processTFArray = function(tf) {\n  var that = this;\n  tf.transforms.forEach(function(transform) {\n    var frameID = transform.child_frame_id;\n    if (frameID[0] === '/')\n    {\n      frameID = frameID.substring(1);\n    }\n    var info = this.frameInfos[frameID];\n    if (info) {\n      info.transform = new Transform({\n        translation : transform.transform.translation,\n        rotation : transform.transform.rotation\n      });\n      info.cbs.forEach(function(cb) {\n        cb(info.transform);\n      });\n    }\n  }, this);\n};\n\n/**\n * Create and send a new goal (or service request) to the tf2_web_republisher\n * based on the current list of TFs.\n */\nTFClient.prototype.updateGoal = function() {\n  var goalMessage = {\n    source_frames : Object.keys(this.frameInfos),\n    target_frame : this.fixedFrame,\n    angular_thres : this.angularThres,\n    trans_thres : this.transThres,\n    rate : this.rate\n  };\n\n  // if we're running in groovy compatibility mode (the default)\n  // then use the action interface to tf2_web_republisher\n  if(this.ros.groovyCompatibility) {\n    if (this.currentGoal) {\n      this.currentGoal.cancel();\n    }\n    this.currentGoal = new Goal({\n      actionClient : this.actionClient,\n      goalMessage : goalMessage\n    });\n\n    this.currentGoal.on('feedback', this.processTFArray.bind(this));\n    this.currentGoal.send();\n  }\n  else {\n    // otherwise, use the service interface\n    // The service interface has the same parameters as the action,\n    // plus the timeout\n    goalMessage.timeout = this.topicTimeout;\n    var request = new ServiceRequest(goalMessage);\n\n    this.serviceClient.callService(request, this.processResponse.bind(this));\n  }\n\n  this.republisherUpdateRequested = false;\n};\n\n/**\n * Process the service response and subscribe to the tf republisher\n * topic\n *\n * @param response the service response containing the topic name\n */\nTFClient.prototype.processResponse = function(response) {\n  // Do not setup a topic subscription if already disposed. Prevents a race condition where\n  // The dispose() function is called before the service call receives a response.\n  if (this._isDisposed) {\n    return;\n  }\n\n  // if we subscribed to a topic before, unsubscribe so\n  // the republisher stops publishing it\n  if (this.currentTopic) {\n    this.currentTopic.unsubscribe(this._subscribeCB);\n  }\n\n  this.currentTopic = new Topic({\n    ros: this.ros,\n    name: response.topic_name,\n    messageType: 'tf2_web_republisher/TFArray'\n  });\n  this._subscribeCB = this.processTFArray.bind(this);\n  this.currentTopic.subscribe(this._subscribeCB);\n};\n\n/**\n * Subscribe to the given TF frame.\n *\n * @param frameID - the TF frame to subscribe to\n * @param callback - function with params:\n *   * transform - the transform data\n */\nTFClient.prototype.subscribe = function(frameID, callback) {\n  // remove leading slash, if it's there\n  if (frameID[0] === '/')\n  {\n    frameID = frameID.substring(1);\n  }\n  // if there is no callback registered for the given frame, create emtpy callback list\n  if (!this.frameInfos[frameID]) {\n    this.frameInfos[frameID] = {\n      cbs: []\n    };\n    if (!this.republisherUpdateRequested) {\n      setTimeout(this.updateGoal.bind(this), this.updateDelay);\n      this.republisherUpdateRequested = true;\n    }\n  }\n  // if we already have a transform, call back immediately\n  else if (this.frameInfos[frameID].transform) {\n    callback(this.frameInfos[frameID].transform);\n  }\n  this.frameInfos[frameID].cbs.push(callback);\n};\n\n/**\n * Unsubscribe from the given TF frame.\n *\n * @param frameID - the TF frame to unsubscribe from\n * @param callback - the callback function to remove\n */\nTFClient.prototype.unsubscribe = function(frameID, callback) {\n  // remove leading slash, if it's there\n  if (frameID[0] === '/')\n  {\n    frameID = frameID.substring(1);\n  }\n  var info = this.frameInfos[frameID];\n  for (var cbs = info && info.cbs || [], idx = cbs.length; idx--;) {\n    if (cbs[idx] === callback) {\n      cbs.splice(idx, 1);\n    }\n  }\n  if (!callback || cbs.length === 0) {\n    delete this.frameInfos[frameID];\n  }\n};\n\n/**\n * Unsubscribe and unadvertise all topics associated with this TFClient.\n */\nTFClient.prototype.dispose = function() {\n  this._isDisposed = true;\n  this.actionClient.dispose();\n  if (this.currentTopic) {\n    this.currentTopic.unsubscribe(this._subscribeCB);\n  }\n};\n\nmodule.exports = TFClient;\n"]},"metadata":{},"sourceType":"script"}