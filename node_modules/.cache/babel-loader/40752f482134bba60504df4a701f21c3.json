{"ast":null,"code":"var _jsxFileName = \"/Users/julien/Sites/react-ros-robot/src/components/Buttons/Hold.jsx\";\nimport React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport Config from \"../../scripts/config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Hover extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ros: null,\n      arming: null\n    };\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros(); // Using window bc using CDN for ROSLIB and not NPM package\n\n    console.log(this.state.ros); // Changing changing button color according to connection state\n\n    this.state.ros.on(\"connection\", () => {\n      this.setState({\n        connected: true\n      });\n    });\n    this.state.ros.on(\"close\", () => {\n      this.setState({\n        connected: false\n      }); //try to reconnect every 2 seconds\n\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n\n  componentDidMount() {\n    this.init_connection();\n    this.hold = this.hold.bind(this);\n  }\n\n  hold() {\n    console.log(\"Arm button clicked\");\n    var takingOff = new window.ROSLIB.Service({\n      ros: this.state.ros,\n      name: \"/mavros/set_mode\",\n      serviceType: \"mavros_msgs/SetMode\"\n    });\n    var request = new window.ROSLIB.ServiceRequest({\n      base_mode: 0,\n      custom_mode: \"AUTO.LOITER\"\n    });\n    takingOff.callService(request, function (result) {\n      console.log(\"Result for \" + takingOff.name + \":\" + JSON.stringify(result));\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Button, {\n      onClick: this.hold,\n      variant: \"primary\",\n      children: \"Hold\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Hover;","map":{"version":3,"sources":["/Users/julien/Sites/react-ros-robot/src/components/Buttons/Hold.jsx"],"names":["React","Component","Button","Config","Hover","constructor","state","ros","arming","init_connection","window","ROSLIB","Ros","console","log","on","setState","connected","setTimeout","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","RECONNECTION_TIMER","componentDidMount","hold","bind","takingOff","Service","name","serviceType","request","ServiceRequest","base_mode","custom_mode","callService","result","JSON","stringify","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport Config from \"../../scripts/config\";\n\nclass Hover extends Component {\n  state = { ros: null, arming: null };\n  constructor() {\n    super();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros(); // Using window bc using CDN for ROSLIB and not NPM package\n    console.log(this.state.ros);\n\n    // Changing changing button color according to connection state\n    this.state.ros.on(\"connection\", () => {\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      this.setState({ connected: false });\n      //try to reconnect every 2 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n\n  componentDidMount() {\n    this.init_connection();\n    this.hold = this.hold.bind(this);\n  }\n\n  hold() {\n    console.log(\"Arm button clicked\");\n    var takingOff = new window.ROSLIB.Service({\n      ros: this.state.ros,\n      name: \"/mavros/set_mode\",\n      serviceType: \"mavros_msgs/SetMode\",\n    });\n\n    var request = new window.ROSLIB.ServiceRequest({\n      base_mode: 0,\n      custom_mode: \"AUTO.LOITER\",\n    });\n\n    takingOff.callService(request, function (result) {\n      console.log(\n        \"Result for \" + takingOff.name + \":\" + JSON.stringify(result)\n      );\n    });\n  }\n\n  render() {\n    return (\n      <Button onClick={this.hold} variant=\"primary\">\n        Hold\n      </Button>\n    );\n  }\n}\n\nexport default Hover;\n"]},"metadata":{},"sourceType":"module"}