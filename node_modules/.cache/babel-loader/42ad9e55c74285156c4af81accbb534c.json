{"ast":null,"code":"/**\n * @fileoverview\n * @author Brandon Alexander - baalexander@gmail.com\n */\nvar WebSocket = require('ws');\n\nvar WorkerSocket = require('../util/workerSocket');\n\nvar socketAdapter = require('./SocketAdapter.js');\n\nvar Service = require('./Service');\n\nvar ServiceRequest = require('./ServiceRequest');\n\nvar assign = require('object-assign');\n\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\n/**\n * Manages connection to the server and all interactions with ROS.\n *\n * Emits the following events:\n *  * 'error' - there was an error with ROS\n *  * 'connection' - connected to the WebSocket server\n *  * 'close' - disconnected to the WebSocket server\n *  * <topicName> - a message came from rosbridge with the given topic name\n *  * <serviceID> - a service response came from rosbridge with the given ID\n *\n * @constructor\n * @param options - possible keys include: <br>\n *   * url (optional) - (can be specified later with `connect`) the WebSocket URL for rosbridge or the node server url to connect using socket.io (if socket.io exists in the page) <br>\n *   * groovyCompatibility - don't use interfaces that changed after the last groovy release or rosbridge_suite and related tools (defaults to true)\n *   * transportLibrary (optional) - one of 'websocket', 'workersocket' (default), 'socket.io' or RTCPeerConnection instance controlling how the connection is created in `connect`.\n *   * transportOptions (optional) - the options to use use when creating a connection. Currently only used if `transportLibrary` is RTCPeerConnection.\n */\n\n\nfunction Ros(options) {\n  options = options || {};\n  var that = this;\n  this.socket = null;\n  this.idCounter = 0;\n  this.isConnected = false;\n  this.transportLibrary = options.transportLibrary || 'websocket';\n  this.transportOptions = options.transportOptions || {};\n\n  this._sendFunc = function (msg) {\n    that.sendEncodedMessage(msg);\n  };\n\n  if (typeof options.groovyCompatibility === 'undefined') {\n    this.groovyCompatibility = true;\n  } else {\n    this.groovyCompatibility = options.groovyCompatibility;\n  } // Sets unlimited event listeners.\n\n\n  this.setMaxListeners(0); // begin by checking if a URL was given\n\n  if (options.url) {\n    this.connect(options.url);\n  }\n}\n\nRos.prototype.__proto__ = EventEmitter2.prototype;\n/**\n * Connect to the specified WebSocket.\n *\n * @param url - WebSocket URL or RTCDataChannel label for Rosbridge\n */\n\nRos.prototype.connect = function (url) {\n  if (this.transportLibrary === 'socket.io') {\n    this.socket = assign(io(url, {\n      'force new connection': true\n    }), socketAdapter(this));\n    this.socket.on('connect', this.socket.onopen);\n    this.socket.on('data', this.socket.onmessage);\n    this.socket.on('close', this.socket.onclose);\n    this.socket.on('error', this.socket.onerror);\n  } else if (this.transportLibrary.constructor.name === 'RTCPeerConnection') {\n    this.socket = assign(this.transportLibrary.createDataChannel(url, this.transportOptions), socketAdapter(this));\n  } else if (this.transportLibrary === 'websocket') {\n    if (!this.socket || this.socket.readyState === WebSocket.CLOSED) {\n      var sock = new WebSocket(url);\n      sock.binaryType = 'arraybuffer';\n      this.socket = assign(sock, socketAdapter(this));\n    }\n  } else if (this.transportLibrary === 'workersocket') {\n    this.socket = assign(new WorkerSocket(url), socketAdapter(this));\n  } else {\n    throw 'Unknown transportLibrary: ' + this.transportLibrary.toString();\n  }\n};\n/**\n * Disconnect from the WebSocket server.\n */\n\n\nRos.prototype.close = function () {\n  if (this.socket) {\n    this.socket.close();\n  }\n};\n/**\n * Sends an authorization request to the server.\n *\n * @param mac - MAC (hash) string given by the trusted source.\n * @param client - IP of the client.\n * @param dest - IP of the destination.\n * @param rand - Random string given by the trusted source.\n * @param t - Time of the authorization request.\n * @param level - User level as a string given by the client.\n * @param end - End time of the client's session.\n */\n\n\nRos.prototype.authenticate = function (mac, client, dest, rand, t, level, end) {\n  // create the request\n  var auth = {\n    op: 'auth',\n    mac: mac,\n    client: client,\n    dest: dest,\n    rand: rand,\n    t: t,\n    level: level,\n    end: end\n  }; // send the request\n\n  this.callOnConnection(auth);\n};\n\nRos.prototype.sendEncodedMessage = function (messageEncoded) {\n  var emitter = null;\n  var that = this;\n\n  if (this.transportLibrary === 'socket.io') {\n    emitter = function (msg) {\n      that.socket.emit('operation', msg);\n    };\n  } else {\n    emitter = function (msg) {\n      that.socket.send(msg);\n    };\n  }\n\n  if (!this.isConnected) {\n    that.once('connection', function () {\n      emitter(messageEncoded);\n    });\n  } else {\n    emitter(messageEncoded);\n  }\n};\n/**\n * Sends the message over the WebSocket, but queues the message up if not yet\n * connected.\n */\n\n\nRos.prototype.callOnConnection = function (message) {\n  if (this.transportOptions.encoder) {\n    this.transportOptions.encoder(message, this._sendFunc);\n  } else {\n    this._sendFunc(JSON.stringify(message));\n  }\n};\n/**\n * Sends a set_level request to the server\n *\n * @param level - Status level (none, error, warning, info)\n * @param id - Optional: Operation ID to change status level on\n */\n\n\nRos.prototype.setStatusLevel = function (level, id) {\n  var levelMsg = {\n    op: 'set_level',\n    level: level,\n    id: id\n  };\n  this.callOnConnection(levelMsg);\n};\n/**\n * Retrieves Action Servers in ROS as an array of string\n *\n * @param callback function with params:\n *   * actionservers - Array of action server names\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\n\n\nRos.prototype.getActionServers = function (callback, failedCallback) {\n  var getActionServers = new Service({\n    ros: this,\n    name: '/rosapi/action_servers',\n    serviceType: 'rosapi/GetActionServers'\n  });\n  var request = new ServiceRequest({});\n\n  if (typeof failedCallback === 'function') {\n    getActionServers.callService(request, function (result) {\n      callback(result.action_servers);\n    }, function (message) {\n      failedCallback(message);\n    });\n  } else {\n    getActionServers.callService(request, function (result) {\n      callback(result.action_servers);\n    });\n  }\n};\n/**\n * Retrieves list of topics in ROS as an array.\n *\n * @param callback function with params:\n *   * topics - Array of topic names\n *   * types - Array of message type names\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\n\n\nRos.prototype.getTopics = function (callback, failedCallback) {\n  var topicsClient = new Service({\n    ros: this,\n    name: '/rosapi/topics',\n    serviceType: 'rosapi/Topics'\n  });\n  var request = new ServiceRequest();\n\n  if (typeof failedCallback === 'function') {\n    topicsClient.callService(request, function (result) {\n      callback(result);\n    }, function (message) {\n      failedCallback(message);\n    });\n  } else {\n    topicsClient.callService(request, function (result) {\n      callback(result);\n    });\n  }\n};\n/**\n * Retrieves Topics in ROS as an array as specific type\n *\n * @param topicType topic type to find\n * @param callback function with params:\n *   * topics - Array of topic names\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\n\n\nRos.prototype.getTopicsForType = function (topicType, callback, failedCallback) {\n  var topicsForTypeClient = new Service({\n    ros: this,\n    name: '/rosapi/topics_for_type',\n    serviceType: 'rosapi/TopicsForType'\n  });\n  var request = new ServiceRequest({\n    type: topicType\n  });\n\n  if (typeof failedCallback === 'function') {\n    topicsForTypeClient.callService(request, function (result) {\n      callback(result.topics);\n    }, function (message) {\n      failedCallback(message);\n    });\n  } else {\n    topicsForTypeClient.callService(request, function (result) {\n      callback(result.topics);\n    });\n  }\n};\n/**\n * Retrieves list of active service names in ROS.\n *\n * @param callback - function with the following params:\n *   * services - array of service names\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\n\n\nRos.prototype.getServices = function (callback, failedCallback) {\n  var servicesClient = new Service({\n    ros: this,\n    name: '/rosapi/services',\n    serviceType: 'rosapi/Services'\n  });\n  var request = new ServiceRequest();\n\n  if (typeof failedCallback === 'function') {\n    servicesClient.callService(request, function (result) {\n      callback(result.services);\n    }, function (message) {\n      failedCallback(message);\n    });\n  } else {\n    servicesClient.callService(request, function (result) {\n      callback(result.services);\n    });\n  }\n};\n/**\n * Retrieves list of services in ROS as an array as specific type\n *\n * @param serviceType service type to find\n * @param callback function with params:\n *   * topics - Array of service names\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\n\n\nRos.prototype.getServicesForType = function (serviceType, callback, failedCallback) {\n  var servicesForTypeClient = new Service({\n    ros: this,\n    name: '/rosapi/services_for_type',\n    serviceType: 'rosapi/ServicesForType'\n  });\n  var request = new ServiceRequest({\n    type: serviceType\n  });\n\n  if (typeof failedCallback === 'function') {\n    servicesForTypeClient.callService(request, function (result) {\n      callback(result.services);\n    }, function (message) {\n      failedCallback(message);\n    });\n  } else {\n    servicesForTypeClient.callService(request, function (result) {\n      callback(result.services);\n    });\n  }\n};\n/**\n * Retrieves a detail of ROS service request.\n *\n * @param service name of service:\n * @param callback - function with params:\n *   * type - String of the service type\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\n\n\nRos.prototype.getServiceRequestDetails = function (type, callback, failedCallback) {\n  var serviceTypeClient = new Service({\n    ros: this,\n    name: '/rosapi/service_request_details',\n    serviceType: 'rosapi/ServiceRequestDetails'\n  });\n  var request = new ServiceRequest({\n    type: type\n  });\n\n  if (typeof failedCallback === 'function') {\n    serviceTypeClient.callService(request, function (result) {\n      callback(result);\n    }, function (message) {\n      failedCallback(message);\n    });\n  } else {\n    serviceTypeClient.callService(request, function (result) {\n      callback(result);\n    });\n  }\n};\n/**\n * Retrieves a detail of ROS service request.\n *\n * @param service name of service\n * @param callback - function with params:\n *   * type - String of the service type\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\n\n\nRos.prototype.getServiceResponseDetails = function (type, callback, failedCallback) {\n  var serviceTypeClient = new Service({\n    ros: this,\n    name: '/rosapi/service_response_details',\n    serviceType: 'rosapi/ServiceResponseDetails'\n  });\n  var request = new ServiceRequest({\n    type: type\n  });\n\n  if (typeof failedCallback === 'function') {\n    serviceTypeClient.callService(request, function (result) {\n      callback(result);\n    }, function (message) {\n      failedCallback(message);\n    });\n  } else {\n    serviceTypeClient.callService(request, function (result) {\n      callback(result);\n    });\n  }\n};\n/**\n * Retrieves list of active node names in ROS.\n *\n * @param callback - function with the following params:\n *   * nodes - array of node names\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\n\n\nRos.prototype.getNodes = function (callback, failedCallback) {\n  var nodesClient = new Service({\n    ros: this,\n    name: '/rosapi/nodes',\n    serviceType: 'rosapi/Nodes'\n  });\n  var request = new ServiceRequest();\n\n  if (typeof failedCallback === 'function') {\n    nodesClient.callService(request, function (result) {\n      callback(result.nodes);\n    }, function (message) {\n      failedCallback(message);\n    });\n  } else {\n    nodesClient.callService(request, function (result) {\n      callback(result.nodes);\n    });\n  }\n};\n/**\n  * Retrieves list subscribed topics, publishing topics and services of a specific node\n  *\n  * @param node name of the node:\n  * @param callback - function with params:\n  *   * publications - array of published topic names\n  *   * subscriptions - array of subscribed topic names\n  *   * services - array of service names hosted\n  * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n  */\n\n\nRos.prototype.getNodeDetails = function (node, callback, failedCallback) {\n  var nodesClient = new Service({\n    ros: this,\n    name: '/rosapi/node_details',\n    serviceType: 'rosapi/NodeDetails'\n  });\n  var request = new ServiceRequest({\n    node: node\n  });\n\n  if (typeof failedCallback === 'function') {\n    nodesClient.callService(request, function (result) {\n      callback(result.subscribing, result.publishing, result.services);\n    }, function (message) {\n      failedCallback(message);\n    });\n  } else {\n    nodesClient.callService(request, function (result) {\n      callback(result);\n    });\n  }\n};\n/**\n * Retrieves list of param names from the ROS Parameter Server.\n *\n * @param callback function with params:\n *  * params - array of param names.\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\n\n\nRos.prototype.getParams = function (callback, failedCallback) {\n  var paramsClient = new Service({\n    ros: this,\n    name: '/rosapi/get_param_names',\n    serviceType: 'rosapi/GetParamNames'\n  });\n  var request = new ServiceRequest();\n\n  if (typeof failedCallback === 'function') {\n    paramsClient.callService(request, function (result) {\n      callback(result.names);\n    }, function (message) {\n      failedCallback(message);\n    });\n  } else {\n    paramsClient.callService(request, function (result) {\n      callback(result.names);\n    });\n  }\n};\n/**\n * Retrieves a type of ROS topic.\n *\n * @param topic name of the topic:\n * @param callback - function with params:\n *   * type - String of the topic type\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\n\n\nRos.prototype.getTopicType = function (topic, callback, failedCallback) {\n  var topicTypeClient = new Service({\n    ros: this,\n    name: '/rosapi/topic_type',\n    serviceType: 'rosapi/TopicType'\n  });\n  var request = new ServiceRequest({\n    topic: topic\n  });\n\n  if (typeof failedCallback === 'function') {\n    topicTypeClient.callService(request, function (result) {\n      callback(result.type);\n    }, function (message) {\n      failedCallback(message);\n    });\n  } else {\n    topicTypeClient.callService(request, function (result) {\n      callback(result.type);\n    });\n  }\n};\n/**\n * Retrieves a type of ROS service.\n *\n * @param service name of service:\n * @param callback - function with params:\n *   * type - String of the service type\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\n\n\nRos.prototype.getServiceType = function (service, callback, failedCallback) {\n  var serviceTypeClient = new Service({\n    ros: this,\n    name: '/rosapi/service_type',\n    serviceType: 'rosapi/ServiceType'\n  });\n  var request = new ServiceRequest({\n    service: service\n  });\n\n  if (typeof failedCallback === 'function') {\n    serviceTypeClient.callService(request, function (result) {\n      callback(result.type);\n    }, function (message) {\n      failedCallback(message);\n    });\n  } else {\n    serviceTypeClient.callService(request, function (result) {\n      callback(result.type);\n    });\n  }\n};\n/**\n * Retrieves a detail of ROS message.\n *\n * @param message - String of a topic type\n * @param callback - function with params:\n *   * details - Array of the message detail\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\n\n\nRos.prototype.getMessageDetails = function (message, callback, failedCallback) {\n  var messageDetailClient = new Service({\n    ros: this,\n    name: '/rosapi/message_details',\n    serviceType: 'rosapi/MessageDetails'\n  });\n  var request = new ServiceRequest({\n    type: message\n  });\n\n  if (typeof failedCallback === 'function') {\n    messageDetailClient.callService(request, function (result) {\n      callback(result.typedefs);\n    }, function (message) {\n      failedCallback(message);\n    });\n  } else {\n    messageDetailClient.callService(request, function (result) {\n      callback(result.typedefs);\n    });\n  }\n};\n/**\n * Decode a typedefs into a dictionary like `rosmsg show foo/bar`\n *\n * @param defs - array of type_def dictionary\n */\n\n\nRos.prototype.decodeTypeDefs = function (defs) {\n  var that = this; // calls itself recursively to resolve type definition using hints.\n\n  var decodeTypeDefsRec = function (theType, hints) {\n    var typeDefDict = {};\n\n    for (var i = 0; i < theType.fieldnames.length; i++) {\n      var arrayLen = theType.fieldarraylen[i];\n      var fieldName = theType.fieldnames[i];\n      var fieldType = theType.fieldtypes[i];\n\n      if (fieldType.indexOf('/') === -1) {\n        // check the fieldType includes '/' or not\n        if (arrayLen === -1) {\n          typeDefDict[fieldName] = fieldType;\n        } else {\n          typeDefDict[fieldName] = [fieldType];\n        }\n      } else {\n        // lookup the name\n        var sub = false;\n\n        for (var j = 0; j < hints.length; j++) {\n          if (hints[j].type.toString() === fieldType.toString()) {\n            sub = hints[j];\n            break;\n          }\n        }\n\n        if (sub) {\n          var subResult = decodeTypeDefsRec(sub, hints);\n\n          if (arrayLen === -1) {} else {\n            typeDefDict[fieldName] = [subResult];\n          }\n        } else {\n          that.emit('error', 'Cannot find ' + fieldType + ' in decodeTypeDefs');\n        }\n      }\n    }\n\n    return typeDefDict;\n  };\n\n  return decodeTypeDefsRec(defs[0], defs);\n};\n/**\n * Retrieves list of topics and their associated type definitions.\n *\n * @param callback function with params:\n *   * topics - Array of topic names\n *   * types - Array of message type names\n *   * typedefs_full_text - Array of full definitions of message types, similar to `gendeps --cat`\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n *\n */\n\n\nRos.prototype.getTopicsAndRawTypes = function (callback, failedCallback) {\n  var topicsAndRawTypesClient = new Service({\n    ros: this,\n    name: '/rosapi/topics_and_raw_types',\n    serviceType: 'rosapi/TopicsAndRawTypes'\n  });\n  var request = new ServiceRequest();\n\n  if (typeof failedCallback === 'function') {\n    topicsAndRawTypesClient.callService(request, function (result) {\n      callback(result);\n    }, function (message) {\n      failedCallback(message);\n    });\n  } else {\n    topicsAndRawTypesClient.callService(request, function (result) {\n      callback(result);\n    });\n  }\n};\n\nmodule.exports = Ros;","map":{"version":3,"sources":["/Users/julien/Sites/react-ros-robot/node_modules/roslib/src/core/Ros.js"],"names":["WebSocket","require","WorkerSocket","socketAdapter","Service","ServiceRequest","assign","EventEmitter2","Ros","options","that","socket","idCounter","isConnected","transportLibrary","transportOptions","_sendFunc","msg","sendEncodedMessage","groovyCompatibility","setMaxListeners","url","connect","prototype","__proto__","io","on","onopen","onmessage","onclose","onerror","constructor","name","createDataChannel","readyState","CLOSED","sock","binaryType","toString","close","authenticate","mac","client","dest","rand","t","level","end","auth","op","callOnConnection","messageEncoded","emitter","emit","send","once","message","encoder","JSON","stringify","setStatusLevel","id","levelMsg","getActionServers","callback","failedCallback","ros","serviceType","request","callService","result","action_servers","getTopics","topicsClient","getTopicsForType","topicType","topicsForTypeClient","type","topics","getServices","servicesClient","services","getServicesForType","servicesForTypeClient","getServiceRequestDetails","serviceTypeClient","getServiceResponseDetails","getNodes","nodesClient","nodes","getNodeDetails","node","subscribing","publishing","getParams","paramsClient","names","getTopicType","topic","topicTypeClient","getServiceType","service","getMessageDetails","messageDetailClient","typedefs","decodeTypeDefs","defs","decodeTypeDefsRec","theType","hints","typeDefDict","i","fieldnames","length","arrayLen","fieldarraylen","fieldName","fieldType","fieldtypes","indexOf","sub","j","subResult","getTopicsAndRawTypes","topicsAndRawTypesClient","module","exports"],"mappings":"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","sourcesContent":["/**\n * @fileoverview\n * @author Brandon Alexander - baalexander@gmail.com\n */\n\nvar WebSocket = require('ws');\nvar WorkerSocket = require('../util/workerSocket');\nvar socketAdapter = require('./SocketAdapter.js');\n\nvar Service = require('./Service');\nvar ServiceRequest = require('./ServiceRequest');\n\nvar assign = require('object-assign');\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\n\n/**\n * Manages connection to the server and all interactions with ROS.\n *\n * Emits the following events:\n *  * 'error' - there was an error with ROS\n *  * 'connection' - connected to the WebSocket server\n *  * 'close' - disconnected to the WebSocket server\n *  * <topicName> - a message came from rosbridge with the given topic name\n *  * <serviceID> - a service response came from rosbridge with the given ID\n *\n * @constructor\n * @param options - possible keys include: <br>\n *   * url (optional) - (can be specified later with `connect`) the WebSocket URL for rosbridge or the node server url to connect using socket.io (if socket.io exists in the page) <br>\n *   * groovyCompatibility - don't use interfaces that changed after the last groovy release or rosbridge_suite and related tools (defaults to true)\n *   * transportLibrary (optional) - one of 'websocket', 'workersocket' (default), 'socket.io' or RTCPeerConnection instance controlling how the connection is created in `connect`.\n *   * transportOptions (optional) - the options to use use when creating a connection. Currently only used if `transportLibrary` is RTCPeerConnection.\n */\nfunction Ros(options) {\n  options = options || {};\n  var that = this;\n  this.socket = null;\n  this.idCounter = 0;\n  this.isConnected = false;\n  this.transportLibrary = options.transportLibrary || 'websocket';\n  this.transportOptions = options.transportOptions || {};\n  this._sendFunc = function(msg) { that.sendEncodedMessage(msg); };\n\n  if (typeof options.groovyCompatibility === 'undefined') {\n    this.groovyCompatibility = true;\n  }\n  else {\n    this.groovyCompatibility = options.groovyCompatibility;\n  }\n\n  // Sets unlimited event listeners.\n  this.setMaxListeners(0);\n\n  // begin by checking if a URL was given\n  if (options.url) {\n    this.connect(options.url);\n  }\n}\n\nRos.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * Connect to the specified WebSocket.\n *\n * @param url - WebSocket URL or RTCDataChannel label for Rosbridge\n */\nRos.prototype.connect = function(url) {\n  if (this.transportLibrary === 'socket.io') {\n    this.socket = assign(io(url, {'force new connection': true}), socketAdapter(this));\n    this.socket.on('connect', this.socket.onopen);\n    this.socket.on('data', this.socket.onmessage);\n    this.socket.on('close', this.socket.onclose);\n    this.socket.on('error', this.socket.onerror);\n  } else if (this.transportLibrary.constructor.name === 'RTCPeerConnection') {\n    this.socket = assign(this.transportLibrary.createDataChannel(url, this.transportOptions), socketAdapter(this));\n  } else if (this.transportLibrary === 'websocket') {\n    if (!this.socket || this.socket.readyState === WebSocket.CLOSED) {\n      var sock = new WebSocket(url);\n      sock.binaryType = 'arraybuffer';\n      this.socket = assign(sock, socketAdapter(this));\n    }\n  } else if (this.transportLibrary === 'workersocket') {\n    this.socket = assign(new WorkerSocket(url), socketAdapter(this));\n  } else {\n    throw 'Unknown transportLibrary: ' + this.transportLibrary.toString();\n  }\n\n};\n\n/**\n * Disconnect from the WebSocket server.\n */\nRos.prototype.close = function() {\n  if (this.socket) {\n    this.socket.close();\n  }\n};\n\n/**\n * Sends an authorization request to the server.\n *\n * @param mac - MAC (hash) string given by the trusted source.\n * @param client - IP of the client.\n * @param dest - IP of the destination.\n * @param rand - Random string given by the trusted source.\n * @param t - Time of the authorization request.\n * @param level - User level as a string given by the client.\n * @param end - End time of the client's session.\n */\nRos.prototype.authenticate = function(mac, client, dest, rand, t, level, end) {\n  // create the request\n  var auth = {\n    op : 'auth',\n    mac : mac,\n    client : client,\n    dest : dest,\n    rand : rand,\n    t : t,\n    level : level,\n    end : end\n  };\n  // send the request\n  this.callOnConnection(auth);\n};\n\nRos.prototype.sendEncodedMessage= function(messageEncoded) {\n  var emitter = null;\n  var that = this;\n  if (this.transportLibrary === 'socket.io') {\n    emitter = function(msg){that.socket.emit('operation', msg);};\n  } else {\n    emitter = function(msg){that.socket.send(msg);};\n  }\n\n  if (!this.isConnected) {\n    that.once('connection', function() {\n      emitter(messageEncoded);\n    });\n  } else {\n    emitter(messageEncoded);\n  }\n};\n\n/**\n * Sends the message over the WebSocket, but queues the message up if not yet\n * connected.\n */\nRos.prototype.callOnConnection = function(message) {\n  if (this.transportOptions.encoder) {\n    this.transportOptions.encoder(message, this._sendFunc);\n  } else {\n    this._sendFunc(JSON.stringify(message));\n  }\n};\n\n/**\n * Sends a set_level request to the server\n *\n * @param level - Status level (none, error, warning, info)\n * @param id - Optional: Operation ID to change status level on\n */\nRos.prototype.setStatusLevel = function(level, id){\n  var levelMsg = {\n    op: 'set_level',\n    level: level,\n    id: id\n  };\n\n  this.callOnConnection(levelMsg);\n};\n\n/**\n * Retrieves Action Servers in ROS as an array of string\n *\n * @param callback function with params:\n *   * actionservers - Array of action server names\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getActionServers = function(callback, failedCallback) {\n  var getActionServers = new Service({\n    ros : this,\n    name : '/rosapi/action_servers',\n    serviceType : 'rosapi/GetActionServers'\n  });\n\n  var request = new ServiceRequest({});\n  if (typeof failedCallback === 'function'){\n    getActionServers.callService(request,\n      function(result) {\n        callback(result.action_servers);\n      },\n      function(message){\n        failedCallback(message);\n      }\n    );\n  }else{\n    getActionServers.callService(request, function(result) {\n      callback(result.action_servers);\n    });\n  }\n};\n\n/**\n * Retrieves list of topics in ROS as an array.\n *\n * @param callback function with params:\n *   * topics - Array of topic names\n *   * types - Array of message type names\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getTopics = function(callback, failedCallback) {\n  var topicsClient = new Service({\n    ros : this,\n    name : '/rosapi/topics',\n    serviceType : 'rosapi/Topics'\n  });\n\n  var request = new ServiceRequest();\n  if (typeof failedCallback === 'function'){\n    topicsClient.callService(request,\n      function(result) {\n        callback(result);\n      },\n      function(message){\n        failedCallback(message);\n      }\n    );\n  }else{\n    topicsClient.callService(request, function(result) {\n      callback(result);\n    });\n  }\n};\n\n/**\n * Retrieves Topics in ROS as an array as specific type\n *\n * @param topicType topic type to find\n * @param callback function with params:\n *   * topics - Array of topic names\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getTopicsForType = function(topicType, callback, failedCallback) {\n  var topicsForTypeClient = new Service({\n    ros : this,\n    name : '/rosapi/topics_for_type',\n    serviceType : 'rosapi/TopicsForType'\n  });\n\n  var request = new ServiceRequest({\n    type: topicType\n  });\n  if (typeof failedCallback === 'function'){\n    topicsForTypeClient.callService(request,\n      function(result) {\n        callback(result.topics);\n      },\n      function(message){\n        failedCallback(message);\n      }\n    );\n  }else{\n    topicsForTypeClient.callService(request, function(result) {\n      callback(result.topics);\n    });\n  }\n};\n\n/**\n * Retrieves list of active service names in ROS.\n *\n * @param callback - function with the following params:\n *   * services - array of service names\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getServices = function(callback, failedCallback) {\n  var servicesClient = new Service({\n    ros : this,\n    name : '/rosapi/services',\n    serviceType : 'rosapi/Services'\n  });\n\n  var request = new ServiceRequest();\n  if (typeof failedCallback === 'function'){\n    servicesClient.callService(request,\n      function(result) {\n        callback(result.services);\n      },\n      function(message) {\n        failedCallback(message);\n      }\n    );\n  }else{\n    servicesClient.callService(request, function(result) {\n      callback(result.services);\n    });\n  }\n};\n\n/**\n * Retrieves list of services in ROS as an array as specific type\n *\n * @param serviceType service type to find\n * @param callback function with params:\n *   * topics - Array of service names\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getServicesForType = function(serviceType, callback, failedCallback) {\n  var servicesForTypeClient = new Service({\n    ros : this,\n    name : '/rosapi/services_for_type',\n    serviceType : 'rosapi/ServicesForType'\n  });\n\n  var request = new ServiceRequest({\n    type: serviceType\n  });\n  if (typeof failedCallback === 'function'){\n    servicesForTypeClient.callService(request,\n      function(result) {\n        callback(result.services);\n      },\n      function(message) {\n        failedCallback(message);\n      }\n    );\n  }else{\n    servicesForTypeClient.callService(request, function(result) {\n      callback(result.services);\n    });\n  }\n};\n\n/**\n * Retrieves a detail of ROS service request.\n *\n * @param service name of service:\n * @param callback - function with params:\n *   * type - String of the service type\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getServiceRequestDetails = function(type, callback, failedCallback) {\n  var serviceTypeClient = new Service({\n    ros : this,\n    name : '/rosapi/service_request_details',\n    serviceType : 'rosapi/ServiceRequestDetails'\n  });\n  var request = new ServiceRequest({\n    type: type\n  });\n\n  if (typeof failedCallback === 'function'){\n    serviceTypeClient.callService(request,\n      function(result) {\n        callback(result);\n      },\n      function(message){\n        failedCallback(message);\n      }\n    );\n  }else{\n    serviceTypeClient.callService(request, function(result) {\n      callback(result);\n    });\n  }\n};\n\n/**\n * Retrieves a detail of ROS service request.\n *\n * @param service name of service\n * @param callback - function with params:\n *   * type - String of the service type\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getServiceResponseDetails = function(type, callback, failedCallback) {\n  var serviceTypeClient = new Service({\n    ros : this,\n    name : '/rosapi/service_response_details',\n    serviceType : 'rosapi/ServiceResponseDetails'\n  });\n  var request = new ServiceRequest({\n    type: type\n  });\n\n  if (typeof failedCallback === 'function'){\n    serviceTypeClient.callService(request,\n      function(result) {\n        callback(result);\n      },\n      function(message){\n        failedCallback(message);\n      }\n    );\n  }else{\n    serviceTypeClient.callService(request, function(result) {\n      callback(result);\n    });\n  }\n};\n\n/**\n * Retrieves list of active node names in ROS.\n *\n * @param callback - function with the following params:\n *   * nodes - array of node names\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getNodes = function(callback, failedCallback) {\n  var nodesClient = new Service({\n    ros : this,\n    name : '/rosapi/nodes',\n    serviceType : 'rosapi/Nodes'\n  });\n\n  var request = new ServiceRequest();\n  if (typeof failedCallback === 'function'){\n    nodesClient.callService(request,\n      function(result) {\n        callback(result.nodes);\n      },\n      function(message) {\n        failedCallback(message);\n      }\n    );\n  }else{\n    nodesClient.callService(request, function(result) {\n      callback(result.nodes);\n    });\n  }\n};\n\n/**\n  * Retrieves list subscribed topics, publishing topics and services of a specific node\n  *\n  * @param node name of the node:\n  * @param callback - function with params:\n  *   * publications - array of published topic names\n  *   * subscriptions - array of subscribed topic names\n  *   * services - array of service names hosted\n  * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n  */\nRos.prototype.getNodeDetails = function(node, callback, failedCallback) {\n  var nodesClient = new Service({\n    ros : this,\n    name : '/rosapi/node_details',\n    serviceType : 'rosapi/NodeDetails'\n  });\n\n  var request = new ServiceRequest({\n    node: node\n  });\n  if (typeof failedCallback === 'function'){\n    nodesClient.callService(request,\n      function(result) {\n        callback(result.subscribing, result.publishing, result.services);\n      },\n      function(message) {\n        failedCallback(message);\n      }\n    );\n  } else {\n    nodesClient.callService(request, function(result) {\n      callback(result);\n    });\n  }\n};\n\n/**\n * Retrieves list of param names from the ROS Parameter Server.\n *\n * @param callback function with params:\n *  * params - array of param names.\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getParams = function(callback, failedCallback) {\n  var paramsClient = new Service({\n    ros : this,\n    name : '/rosapi/get_param_names',\n    serviceType : 'rosapi/GetParamNames'\n  });\n  var request = new ServiceRequest();\n  if (typeof failedCallback === 'function'){\n    paramsClient.callService(request,\n      function(result) {\n        callback(result.names);\n      },\n      function(message){\n        failedCallback(message);\n      }\n    );\n  }else{\n    paramsClient.callService(request, function(result) {\n      callback(result.names);\n    });\n  }\n};\n\n/**\n * Retrieves a type of ROS topic.\n *\n * @param topic name of the topic:\n * @param callback - function with params:\n *   * type - String of the topic type\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getTopicType = function(topic, callback, failedCallback) {\n  var topicTypeClient = new Service({\n    ros : this,\n    name : '/rosapi/topic_type',\n    serviceType : 'rosapi/TopicType'\n  });\n  var request = new ServiceRequest({\n    topic: topic\n  });\n\n  if (typeof failedCallback === 'function'){\n    topicTypeClient.callService(request,\n      function(result) {\n        callback(result.type);\n      },\n      function(message){\n        failedCallback(message);\n      }\n    );\n  }else{\n    topicTypeClient.callService(request, function(result) {\n      callback(result.type);\n    });\n  }\n};\n\n/**\n * Retrieves a type of ROS service.\n *\n * @param service name of service:\n * @param callback - function with params:\n *   * type - String of the service type\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getServiceType = function(service, callback, failedCallback) {\n  var serviceTypeClient = new Service({\n    ros : this,\n    name : '/rosapi/service_type',\n    serviceType : 'rosapi/ServiceType'\n  });\n  var request = new ServiceRequest({\n    service: service\n  });\n\n  if (typeof failedCallback === 'function'){\n    serviceTypeClient.callService(request,\n      function(result) {\n        callback(result.type);\n      },\n      function(message){\n        failedCallback(message);\n      }\n    );\n  }else{\n    serviceTypeClient.callService(request, function(result) {\n      callback(result.type);\n    });\n  }\n};\n\n/**\n * Retrieves a detail of ROS message.\n *\n * @param message - String of a topic type\n * @param callback - function with params:\n *   * details - Array of the message detail\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n */\nRos.prototype.getMessageDetails = function(message, callback, failedCallback) {\n  var messageDetailClient = new Service({\n    ros : this,\n    name : '/rosapi/message_details',\n    serviceType : 'rosapi/MessageDetails'\n  });\n  var request = new ServiceRequest({\n    type: message\n  });\n\n  if (typeof failedCallback === 'function'){\n    messageDetailClient.callService(request,\n      function(result) {\n        callback(result.typedefs);\n      },\n      function(message){\n        failedCallback(message);\n      }\n    );\n  }else{\n    messageDetailClient.callService(request, function(result) {\n      callback(result.typedefs);\n    });\n  }\n};\n\n/**\n * Decode a typedefs into a dictionary like `rosmsg show foo/bar`\n *\n * @param defs - array of type_def dictionary\n */\nRos.prototype.decodeTypeDefs = function(defs) {\n  var that = this;\n\n  // calls itself recursively to resolve type definition using hints.\n  var decodeTypeDefsRec = function(theType, hints) {\n    var typeDefDict = {};\n    for (var i = 0; i < theType.fieldnames.length; i++) {\n      var arrayLen = theType.fieldarraylen[i];\n      var fieldName = theType.fieldnames[i];\n      var fieldType = theType.fieldtypes[i];\n      if (fieldType.indexOf('/') === -1) { // check the fieldType includes '/' or not\n        if (arrayLen === -1) {\n          typeDefDict[fieldName] = fieldType;\n        }\n        else {\n          typeDefDict[fieldName] = [fieldType];\n        }\n      }\n      else {\n        // lookup the name\n        var sub = false;\n        for (var j = 0; j < hints.length; j++) {\n          if (hints[j].type.toString() === fieldType.toString()) {\n            sub = hints[j];\n            break;\n          }\n        }\n        if (sub) {\n          var subResult = decodeTypeDefsRec(sub, hints);\n          if (arrayLen === -1) {\n          }\n          else {\n            typeDefDict[fieldName] = [subResult];\n          }\n        }\n        else {\n          that.emit('error', 'Cannot find ' + fieldType + ' in decodeTypeDefs');\n        }\n      }\n    }\n    return typeDefDict;\n  };\n\n  return decodeTypeDefsRec(defs[0], defs);\n};\n\n/**\n * Retrieves list of topics and their associated type definitions.\n *\n * @param callback function with params:\n *   * topics - Array of topic names\n *   * types - Array of message type names\n *   * typedefs_full_text - Array of full definitions of message types, similar to `gendeps --cat`\n * @param failedCallback - the callback function when the service call failed (optional). Params:\n *   * error - the error message reported by ROS\n *\n */\nRos.prototype.getTopicsAndRawTypes = function(callback, failedCallback) {\n  var topicsAndRawTypesClient = new Service({\n    ros : this,\n    name : '/rosapi/topics_and_raw_types',\n    serviceType : 'rosapi/TopicsAndRawTypes'\n  });\n\n  var request = new ServiceRequest();\n  if (typeof failedCallback === 'function'){\n    topicsAndRawTypesClient.callService(request,\n      function(result) {\n        callback(result);\n      },\n      function(message){\n        failedCallback(message);\n      }\n    );\n  }else{\n    topicsAndRawTypesClient.callService(request, function(result) {\n      callback(result);\n    });\n  }\n};\n\n\nmodule.exports = Ros;\n"]},"metadata":{},"sourceType":"script"}