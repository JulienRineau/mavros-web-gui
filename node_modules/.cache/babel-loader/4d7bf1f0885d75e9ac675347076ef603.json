{"ast":null,"code":"/**\n * @fileoverview\n * @author Brandon Alexander - baalexander@gmail.com\n */\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\n\nvar Message = require('./Message');\n/**\n * Publish and/or subscribe to a topic in ROS.\n *\n * Emits the following events:\n *  * 'warning' - if there are any warning during the Topic creation\n *  * 'message' - the message data from rosbridge\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * name - the topic name, like /cmd_vel\n *   * messageType - the message type, like 'std_msgs/String'\n *   * compression - the type of compression to use, like 'png', 'cbor', or 'cbor-raw'\n *   * throttle_rate - the rate (in ms in between messages) at which to throttle the topics\n *   * queue_size - the queue created at bridge side for re-publishing webtopics (defaults to 100)\n *   * latch - latch the topic when publishing\n *   * queue_length - the queue length at bridge side used when subscribing (defaults to 0, no queueing).\n *   * reconnect_on_close - the flag to enable resubscription and readvertisement on close event(defaults to true).\n */\n\n\nfunction Topic(options) {\n  options = options || {};\n  this.ros = options.ros;\n  this.name = options.name;\n  this.messageType = options.messageType;\n  this.isAdvertised = false;\n  this.compression = options.compression || 'none';\n  this.throttle_rate = options.throttle_rate || 0;\n  this.latch = options.latch || false;\n  this.queue_size = options.queue_size || 100;\n  this.queue_length = options.queue_length || 0;\n  this.reconnect_on_close = options.reconnect_on_close !== undefined ? options.reconnect_on_close : true; // Check for valid compression types\n\n  if (this.compression && this.compression !== 'png' && this.compression !== 'cbor' && this.compression !== 'cbor-raw' && this.compression !== 'none') {\n    this.emit('warning', this.compression + ' compression is not supported. No compression will be used.');\n    this.compression = 'none';\n  } // Check if throttle rate is negative\n\n\n  if (this.throttle_rate < 0) {\n    this.emit('warning', this.throttle_rate + ' is not allowed. Set to 0');\n    this.throttle_rate = 0;\n  }\n\n  var that = this;\n\n  if (this.reconnect_on_close) {\n    this.callForSubscribeAndAdvertise = function (message) {\n      that.ros.callOnConnection(message);\n      that.waitForReconnect = false;\n\n      that.reconnectFunc = function () {\n        if (!that.waitForReconnect) {\n          that.waitForReconnect = true;\n          that.ros.callOnConnection(message);\n          that.ros.once('connection', function () {\n            that.waitForReconnect = false;\n          });\n        }\n      };\n\n      that.ros.on('close', that.reconnectFunc);\n    };\n  } else {\n    this.callForSubscribeAndAdvertise = this.ros.callOnConnection;\n  }\n\n  this._messageCallback = function (data) {\n    that.emit('message', new Message(data));\n  };\n}\n\nTopic.prototype.__proto__ = EventEmitter2.prototype;\n/**\n * Every time a message is published for the given topic, the callback\n * will be called with the message object.\n *\n * @param callback - function with the following params:\n *   * message - the published message\n */\n\nTopic.prototype.subscribe = function (callback) {\n  if (typeof callback === 'function') {\n    this.on('message', callback);\n  }\n\n  if (this.subscribeId) {\n    return;\n  }\n\n  this.ros.on(this.name, this._messageCallback);\n  this.subscribeId = 'subscribe:' + this.name + ':' + ++this.ros.idCounter;\n  this.callForSubscribeAndAdvertise({\n    op: 'subscribe',\n    id: this.subscribeId,\n    type: this.messageType,\n    topic: this.name,\n    compression: this.compression,\n    throttle_rate: this.throttle_rate,\n    queue_length: this.queue_length\n  });\n};\n/**\n * Unregisters as a subscriber for the topic. Unsubscribing stop remove\n * all subscribe callbacks. To remove a call back, you must explicitly\n * pass the callback function in.\n *\n * @param callback - the optional callback to unregister, if\n *     * provided and other listeners are registered the topic won't\n *     * unsubscribe, just stop emitting to the passed listener\n */\n\n\nTopic.prototype.unsubscribe = function (callback) {\n  if (callback) {\n    this.off('message', callback); // If there is any other callbacks still subscribed don't unsubscribe\n\n    if (this.listeners('message').length) {\n      return;\n    }\n  }\n\n  if (!this.subscribeId) {\n    return;\n  } // Note: Don't call this.removeAllListeners, allow client to handle that themselves\n\n\n  this.ros.off(this.name, this._messageCallback);\n\n  if (this.reconnect_on_close) {\n    this.ros.off('close', this.reconnectFunc);\n  }\n\n  this.emit('unsubscribe');\n  this.ros.callOnConnection({\n    op: 'unsubscribe',\n    id: this.subscribeId,\n    topic: this.name\n  });\n  this.subscribeId = null;\n};\n/**\n * Registers as a publisher for the topic.\n */\n\n\nTopic.prototype.advertise = function () {\n  if (this.isAdvertised) {\n    return;\n  }\n\n  this.advertiseId = 'advertise:' + this.name + ':' + ++this.ros.idCounter;\n  this.callForSubscribeAndAdvertise({\n    op: 'advertise',\n    id: this.advertiseId,\n    type: this.messageType,\n    topic: this.name,\n    latch: this.latch,\n    queue_size: this.queue_size\n  });\n  this.isAdvertised = true;\n\n  if (!this.reconnect_on_close) {\n    var that = this;\n    this.ros.on('close', function () {\n      that.isAdvertised = false;\n    });\n  }\n};\n/**\n * Unregisters as a publisher for the topic.\n */\n\n\nTopic.prototype.unadvertise = function () {\n  if (!this.isAdvertised) {\n    return;\n  }\n\n  if (this.reconnect_on_close) {\n    this.ros.off('close', this.reconnectFunc);\n  }\n\n  this.emit('unadvertise');\n  this.ros.callOnConnection({\n    op: 'unadvertise',\n    id: this.advertiseId,\n    topic: this.name\n  });\n  this.isAdvertised = false;\n};\n/**\n * Publish the message.\n *\n * @param message - A ROSLIB.Message object.\n */\n\n\nTopic.prototype.publish = function (message) {\n  if (!this.isAdvertised) {\n    this.advertise();\n  }\n\n  this.ros.idCounter++;\n  var call = {\n    op: 'publish',\n    id: 'publish:' + this.name + ':' + this.ros.idCounter,\n    topic: this.name,\n    msg: message,\n    latch: this.latch\n  };\n  this.ros.callOnConnection(call);\n};\n\nmodule.exports = Topic;","map":{"version":3,"sources":["/Users/julien/Sites/react-ros-robot/node_modules/roslib/src/core/Topic.js"],"names":["EventEmitter2","require","Message","Topic","options","ros","name","messageType","isAdvertised","compression","throttle_rate","latch","queue_size","queue_length","reconnect_on_close","undefined","emit","that","callForSubscribeAndAdvertise","message","callOnConnection","waitForReconnect","reconnectFunc","once","on","_messageCallback","data","prototype","__proto__","subscribe","callback","subscribeId","idCounter","op","id","type","topic","unsubscribe","off","listeners","length","advertise","advertiseId","unadvertise","publish","call","msg","module","exports"],"mappings":"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","sourcesContent":["/**\n * @fileoverview\n * @author Brandon Alexander - baalexander@gmail.com\n */\n\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\nvar Message = require('./Message');\n\n/**\n * Publish and/or subscribe to a topic in ROS.\n *\n * Emits the following events:\n *  * 'warning' - if there are any warning during the Topic creation\n *  * 'message' - the message data from rosbridge\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * name - the topic name, like /cmd_vel\n *   * messageType - the message type, like 'std_msgs/String'\n *   * compression - the type of compression to use, like 'png', 'cbor', or 'cbor-raw'\n *   * throttle_rate - the rate (in ms in between messages) at which to throttle the topics\n *   * queue_size - the queue created at bridge side for re-publishing webtopics (defaults to 100)\n *   * latch - latch the topic when publishing\n *   * queue_length - the queue length at bridge side used when subscribing (defaults to 0, no queueing).\n *   * reconnect_on_close - the flag to enable resubscription and readvertisement on close event(defaults to true).\n */\nfunction Topic(options) {\n  options = options || {};\n  this.ros = options.ros;\n  this.name = options.name;\n  this.messageType = options.messageType;\n  this.isAdvertised = false;\n  this.compression = options.compression || 'none';\n  this.throttle_rate = options.throttle_rate || 0;\n  this.latch = options.latch || false;\n  this.queue_size = options.queue_size || 100;\n  this.queue_length = options.queue_length || 0;\n  this.reconnect_on_close = options.reconnect_on_close !== undefined ? options.reconnect_on_close : true;\n\n  // Check for valid compression types\n  if (this.compression && this.compression !== 'png' &&\n    this.compression !== 'cbor' && this.compression !== 'cbor-raw' &&\n    this.compression !== 'none') {\n    this.emit('warning', this.compression +\n      ' compression is not supported. No compression will be used.');\n    this.compression = 'none';\n  }\n\n  // Check if throttle rate is negative\n  if (this.throttle_rate < 0) {\n    this.emit('warning', this.throttle_rate + ' is not allowed. Set to 0');\n    this.throttle_rate = 0;\n  }\n\n  var that = this;\n  if (this.reconnect_on_close) {\n    this.callForSubscribeAndAdvertise = function(message) {\n      that.ros.callOnConnection(message);\n\n      that.waitForReconnect = false;\n      that.reconnectFunc = function() {\n        if(!that.waitForReconnect) {\n          that.waitForReconnect = true;\n          that.ros.callOnConnection(message);\n          that.ros.once('connection', function() {\n            that.waitForReconnect = false;\n          });\n        }\n      };\n      that.ros.on('close', that.reconnectFunc);\n    };\n  }\n  else {\n    this.callForSubscribeAndAdvertise = this.ros.callOnConnection;\n  }\n\n  this._messageCallback = function(data) {\n    that.emit('message', new Message(data));\n  };\n}\nTopic.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * Every time a message is published for the given topic, the callback\n * will be called with the message object.\n *\n * @param callback - function with the following params:\n *   * message - the published message\n */\nTopic.prototype.subscribe = function(callback) {\n  if (typeof callback === 'function') {\n    this.on('message', callback);\n  }\n\n  if (this.subscribeId) { return; }\n  this.ros.on(this.name, this._messageCallback);\n  this.subscribeId = 'subscribe:' + this.name + ':' + (++this.ros.idCounter);\n\n  this.callForSubscribeAndAdvertise({\n    op: 'subscribe',\n    id: this.subscribeId,\n    type: this.messageType,\n    topic: this.name,\n    compression: this.compression,\n    throttle_rate: this.throttle_rate,\n    queue_length: this.queue_length\n  });\n};\n\n/**\n * Unregisters as a subscriber for the topic. Unsubscribing stop remove\n * all subscribe callbacks. To remove a call back, you must explicitly\n * pass the callback function in.\n *\n * @param callback - the optional callback to unregister, if\n *     * provided and other listeners are registered the topic won't\n *     * unsubscribe, just stop emitting to the passed listener\n */\nTopic.prototype.unsubscribe = function(callback) {\n  if (callback) {\n    this.off('message', callback);\n    // If there is any other callbacks still subscribed don't unsubscribe\n    if (this.listeners('message').length) { return; }\n  }\n  if (!this.subscribeId) { return; }\n  // Note: Don't call this.removeAllListeners, allow client to handle that themselves\n  this.ros.off(this.name, this._messageCallback);\n  if(this.reconnect_on_close) {\n    this.ros.off('close', this.reconnectFunc);\n  }\n  this.emit('unsubscribe');\n  this.ros.callOnConnection({\n    op: 'unsubscribe',\n    id: this.subscribeId,\n    topic: this.name\n  });\n  this.subscribeId = null;\n};\n\n\n/**\n * Registers as a publisher for the topic.\n */\nTopic.prototype.advertise = function() {\n  if (this.isAdvertised) {\n    return;\n  }\n  this.advertiseId = 'advertise:' + this.name + ':' + (++this.ros.idCounter);\n  this.callForSubscribeAndAdvertise({\n    op: 'advertise',\n    id: this.advertiseId,\n    type: this.messageType,\n    topic: this.name,\n    latch: this.latch,\n    queue_size: this.queue_size\n  });\n  this.isAdvertised = true;\n\n  if(!this.reconnect_on_close) {\n    var that = this;\n    this.ros.on('close', function() {\n      that.isAdvertised = false;\n    });\n  }\n};\n\n/**\n * Unregisters as a publisher for the topic.\n */\nTopic.prototype.unadvertise = function() {\n  if (!this.isAdvertised) {\n    return;\n  }\n  if(this.reconnect_on_close) {\n    this.ros.off('close', this.reconnectFunc);\n  }\n  this.emit('unadvertise');\n  this.ros.callOnConnection({\n    op: 'unadvertise',\n    id: this.advertiseId,\n    topic: this.name\n  });\n  this.isAdvertised = false;\n};\n\n/**\n * Publish the message.\n *\n * @param message - A ROSLIB.Message object.\n */\nTopic.prototype.publish = function(message) {\n  if (!this.isAdvertised) {\n    this.advertise();\n  }\n\n  this.ros.idCounter++;\n  var call = {\n    op: 'publish',\n    id: 'publish:' + this.name + ':' + this.ros.idCounter,\n    topic: this.name,\n    msg: message,\n    latch: this.latch\n  };\n  this.ros.callOnConnection(call);\n};\n\nmodule.exports = Topic;\n"]},"metadata":{},"sourceType":"script"}