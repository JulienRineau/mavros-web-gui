{"ast":null,"code":"var _jsxFileName = \"/Users/julien/Sites/react-ros-robot/src/components/RobotState.jsx\";\nimport React, { Component } from \"react\";\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\nimport Config from \"../scripts/config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RobotState extends Component {\n  constructor() {\n    super();\n    this.state = {\n      x: 0,\n      y: 0,\n      linear_velocity: 0,\n      latitude: 0,\n      longitude: 0,\n      altitude: 0,\n      battery: 0,\n      ros: null\n    };\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros(); // Using window bc using CDN for ROSLIB and not NPM package\n\n    console.log(this.state.ros); // Changing changing button color according to connection state\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"Connection established.\");\n      this.setState({\n        connected: true\n      });\n    });\n    this.state.ros.on(\"close\", () => {\n      console.log(\"Connection closed.\");\n      this.setState({\n        connected: false\n      }); //try to reconnect every 2 seconds\n\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n\n  componentDidMount() {\n    this.getDroneState();\n  }\n\n  getDroneState() {\n    // create a pose subscriber\n    var pose_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: \"/mavros/battery\",\n      messageType: \"sensor_msgs/BatteryState\"\n    });\n    pose_subscriber.subscribe(message => {\n      this.setState({\n        battery: message.percentage\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"State\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-0\",\n            children: [\"Latitude: \", this.state.latitude]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-0\",\n            children: [\"Longitude: \", this.state.latitude]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-0\",\n            children: [\"Altitude: \", this.state.latitude]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-0\",\n            children: [\"Velocity: \", this.state.linear_velocity, \" m/s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-0\",\n            children: [\"Battery: \", this.state.battery * 100, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default RobotState;","map":{"version":3,"sources":["/Users/julien/Sites/react-ros-robot/src/components/RobotState.jsx"],"names":["React","Component","Row","Col","Container","Button","Config","RobotState","constructor","state","x","y","linear_velocity","latitude","longitude","altitude","battery","ros","init_connection","window","ROSLIB","Ros","console","log","on","setState","connected","setTimeout","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","RECONNECTION_TIMER","componentDidMount","getDroneState","pose_subscriber","Topic","name","messageType","subscribe","message","percentage","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\nimport Config from \"../scripts/config\";\n\nclass RobotState extends Component {\n  state = {\n    x: 0,\n    y: 0,\n    linear_velocity: 0,\n    latitude: 0,\n    longitude: 0,\n    altitude: 0,\n    battery: 0,\n    ros: null,\n  };\n\n  constructor() {\n    super();\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros(); // Using window bc using CDN for ROSLIB and not NPM package\n    console.log(this.state.ros);\n\n    // Changing changing button color according to connection state\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"Connection established.\");\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"Connection closed.\");\n      this.setState({ connected: false });\n      //try to reconnect every 2 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n\n  componentDidMount() {\n    this.getDroneState();\n  }\n\n  getDroneState() {\n    // create a pose subscriber\n    var pose_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: \"/mavros/battery\",\n      messageType: \"sensor_msgs/BatteryState\",\n    });\n\n    pose_subscriber.subscribe((message) => {\n      this.setState({ battery: message.percentage });\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Row>\n          <Col>\n            <h2>State</h2>\n            <p className=\"mt-0\">Latitude: {this.state.latitude}</p>\n            <p className=\"mt-0\">Longitude: {this.state.latitude}</p>\n            <p className=\"mt-0\">Altitude: {this.state.latitude}</p>\n            <p className=\"mt-0\">Velocity: {this.state.linear_velocity} m/s</p>\n            <p className=\"mt-0\">Battery: {this.state.battery * 100}%</p>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default RobotState;\n"]},"metadata":{},"sourceType":"module"}