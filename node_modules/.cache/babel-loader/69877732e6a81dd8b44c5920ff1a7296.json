{"ast":null,"code":"/**\n * @fileoverview\n * @author David Gossow - dgossow@willowgarage.com\n */\n\n/**\n * A Quaternion.\n *\n *  @constructor\n *  @param options - object with following keys:\n *   * x - the x value\n *   * y - the y value\n *   * z - the z value\n *   * w - the w value\n */\nfunction Quaternion(options) {\n  options = options || {};\n  this.x = options.x || 0;\n  this.y = options.y || 0;\n  this.z = options.z || 0;\n  this.w = typeof options.w === 'number' ? options.w : 1;\n}\n/**\n * Perform a conjugation on this quaternion.\n */\n\n\nQuaternion.prototype.conjugate = function () {\n  this.x *= -1;\n  this.y *= -1;\n  this.z *= -1;\n};\n/**\n * Return the norm of this quaternion.\n */\n\n\nQuaternion.prototype.norm = function () {\n  return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n};\n/**\n * Perform a normalization on this quaternion.\n */\n\n\nQuaternion.prototype.normalize = function () {\n  var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n\n  if (l === 0) {\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n    this.w = 1;\n  } else {\n    l = 1 / l;\n    this.x = this.x * l;\n    this.y = this.y * l;\n    this.z = this.z * l;\n    this.w = this.w * l;\n  }\n};\n/**\n * Convert this quaternion into its inverse.\n */\n\n\nQuaternion.prototype.invert = function () {\n  this.conjugate();\n  this.normalize();\n};\n/**\n * Set the values of this quaternion to the product of itself and the given quaternion.\n *\n * @param q the quaternion to multiply with\n */\n\n\nQuaternion.prototype.multiply = function (q) {\n  var newX = this.x * q.w + this.y * q.z - this.z * q.y + this.w * q.x;\n  var newY = -this.x * q.z + this.y * q.w + this.z * q.x + this.w * q.y;\n  var newZ = this.x * q.y - this.y * q.x + this.z * q.w + this.w * q.z;\n  var newW = -this.x * q.x - this.y * q.y - this.z * q.z + this.w * q.w;\n  this.x = newX;\n  this.y = newY;\n  this.z = newZ;\n  this.w = newW;\n};\n/**\n * Clone a copy of this quaternion.\n *\n * @returns the cloned quaternion\n */\n\n\nQuaternion.prototype.clone = function () {\n  return new Quaternion(this);\n};\n\nmodule.exports = Quaternion;","map":{"version":3,"sources":["/Users/julien/Sites/react-ros-robot/node_modules/roslib/src/math/Quaternion.js"],"names":["Quaternion","options","x","y","z","w","prototype","conjugate","norm","Math","sqrt","normalize","l","invert","multiply","q","newX","newY","newZ","newW","clone","module","exports"],"mappings":"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","sourcesContent":["/**\n * @fileoverview\n * @author David Gossow - dgossow@willowgarage.com\n */\n\n/**\n * A Quaternion.\n *\n *  @constructor\n *  @param options - object with following keys:\n *   * x - the x value\n *   * y - the y value\n *   * z - the z value\n *   * w - the w value\n */\nfunction Quaternion(options) {\n  options = options || {};\n  this.x = options.x || 0;\n  this.y = options.y || 0;\n  this.z = options.z || 0;\n  this.w = (typeof options.w === 'number') ? options.w : 1;\n}\n\n/**\n * Perform a conjugation on this quaternion.\n */\nQuaternion.prototype.conjugate = function() {\n  this.x *= -1;\n  this.y *= -1;\n  this.z *= -1;\n};\n\n/**\n * Return the norm of this quaternion.\n */\nQuaternion.prototype.norm = function() {\n  return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n};\n\n/**\n * Perform a normalization on this quaternion.\n */\nQuaternion.prototype.normalize = function() {\n  var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n  if (l === 0) {\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n    this.w = 1;\n  } else {\n    l = 1 / l;\n    this.x = this.x * l;\n    this.y = this.y * l;\n    this.z = this.z * l;\n    this.w = this.w * l;\n  }\n};\n\n/**\n * Convert this quaternion into its inverse.\n */\nQuaternion.prototype.invert = function() {\n  this.conjugate();\n  this.normalize();\n};\n\n/**\n * Set the values of this quaternion to the product of itself and the given quaternion.\n *\n * @param q the quaternion to multiply with\n */\nQuaternion.prototype.multiply = function(q) {\n  var newX = this.x * q.w + this.y * q.z - this.z * q.y + this.w * q.x;\n  var newY = -this.x * q.z + this.y * q.w + this.z * q.x + this.w * q.y;\n  var newZ = this.x * q.y - this.y * q.x + this.z * q.w + this.w * q.z;\n  var newW = -this.x * q.x - this.y * q.y - this.z * q.z + this.w * q.w;\n  this.x = newX;\n  this.y = newY;\n  this.z = newZ;\n  this.w = newW;\n};\n\n/**\n * Clone a copy of this quaternion.\n *\n * @returns the cloned quaternion\n */\nQuaternion.prototype.clone = function() {\n  return new Quaternion(this);\n};\n\nmodule.exports = Quaternion;\n"]},"metadata":{},"sourceType":"script"}