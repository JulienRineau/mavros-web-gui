{"ast":null,"code":"/*\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2014 Patrick Gansterer <paroga@paroga.com>\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\n(function (global, undefined) {\n  \"use strict\";\n\n  var POW_2_24 = Math.pow(2, -24),\n      POW_2_32 = Math.pow(2, 32),\n      POW_2_53 = Math.pow(2, 53);\n\n  function encode(value) {\n    var data = new ArrayBuffer(256);\n    var dataView = new DataView(data);\n    var lastLength;\n    var offset = 0;\n\n    function ensureSpace(length) {\n      var newByteLength = data.byteLength;\n      var requiredLength = offset + length;\n\n      while (newByteLength < requiredLength) newByteLength *= 2;\n\n      if (newByteLength !== data.byteLength) {\n        var oldDataView = dataView;\n        data = new ArrayBuffer(newByteLength);\n        dataView = new DataView(data);\n        var uint32count = offset + 3 >> 2;\n\n        for (var i = 0; i < uint32count; ++i) dataView.setUint32(i * 4, oldDataView.getUint32(i * 4));\n      }\n\n      lastLength = length;\n      return dataView;\n    }\n\n    function write() {\n      offset += lastLength;\n    }\n\n    function writeFloat64(value) {\n      write(ensureSpace(8).setFloat64(offset, value));\n    }\n\n    function writeUint8(value) {\n      write(ensureSpace(1).setUint8(offset, value));\n    }\n\n    function writeUint8Array(value) {\n      var dataView = ensureSpace(value.length);\n\n      for (var i = 0; i < value.length; ++i) dataView.setUint8(offset + i, value[i]);\n\n      write();\n    }\n\n    function writeUint16(value) {\n      write(ensureSpace(2).setUint16(offset, value));\n    }\n\n    function writeUint32(value) {\n      write(ensureSpace(4).setUint32(offset, value));\n    }\n\n    function writeUint64(value) {\n      var low = value % POW_2_32;\n      var high = (value - low) / POW_2_32;\n      var dataView = ensureSpace(8);\n      dataView.setUint32(offset, high);\n      dataView.setUint32(offset + 4, low);\n      write();\n    }\n\n    function writeTypeAndLength(type, length) {\n      if (length < 24) {\n        writeUint8(type << 5 | length);\n      } else if (length < 0x100) {\n        writeUint8(type << 5 | 24);\n        writeUint8(length);\n      } else if (length < 0x10000) {\n        writeUint8(type << 5 | 25);\n        writeUint16(length);\n      } else if (length < 0x100000000) {\n        writeUint8(type << 5 | 26);\n        writeUint32(length);\n      } else {\n        writeUint8(type << 5 | 27);\n        writeUint64(length);\n      }\n    }\n\n    function encodeItem(value) {\n      var i;\n      if (value === false) return writeUint8(0xf4);\n      if (value === true) return writeUint8(0xf5);\n      if (value === null) return writeUint8(0xf6);\n      if (value === undefined) return writeUint8(0xf7);\n\n      switch (typeof value) {\n        case \"number\":\n          if (Math.floor(value) === value) {\n            if (0 <= value && value <= POW_2_53) return writeTypeAndLength(0, value);\n            if (-POW_2_53 <= value && value < 0) return writeTypeAndLength(1, -(value + 1));\n          }\n\n          writeUint8(0xfb);\n          return writeFloat64(value);\n\n        case \"string\":\n          var utf8data = [];\n\n          for (i = 0; i < value.length; ++i) {\n            var charCode = value.charCodeAt(i);\n\n            if (charCode < 0x80) {\n              utf8data.push(charCode);\n            } else if (charCode < 0x800) {\n              utf8data.push(0xc0 | charCode >> 6);\n              utf8data.push(0x80 | charCode & 0x3f);\n            } else if (charCode < 0xd800) {\n              utf8data.push(0xe0 | charCode >> 12);\n              utf8data.push(0x80 | charCode >> 6 & 0x3f);\n              utf8data.push(0x80 | charCode & 0x3f);\n            } else {\n              charCode = (charCode & 0x3ff) << 10;\n              charCode |= value.charCodeAt(++i) & 0x3ff;\n              charCode += 0x10000;\n              utf8data.push(0xf0 | charCode >> 18);\n              utf8data.push(0x80 | charCode >> 12 & 0x3f);\n              utf8data.push(0x80 | charCode >> 6 & 0x3f);\n              utf8data.push(0x80 | charCode & 0x3f);\n            }\n          }\n\n          writeTypeAndLength(3, utf8data.length);\n          return writeUint8Array(utf8data);\n\n        default:\n          var length;\n\n          if (Array.isArray(value)) {\n            length = value.length;\n            writeTypeAndLength(4, length);\n\n            for (i = 0; i < length; ++i) encodeItem(value[i]);\n          } else if (value instanceof Uint8Array) {\n            writeTypeAndLength(2, value.length);\n            writeUint8Array(value);\n          } else {\n            var keys = Object.keys(value);\n            length = keys.length;\n            writeTypeAndLength(5, length);\n\n            for (i = 0; i < length; ++i) {\n              var key = keys[i];\n              encodeItem(key);\n              encodeItem(value[key]);\n            }\n          }\n\n      }\n    }\n\n    encodeItem(value);\n    if (\"slice\" in data) return data.slice(0, offset);\n    var ret = new ArrayBuffer(offset);\n    var retView = new DataView(ret);\n\n    for (var i = 0; i < offset; ++i) retView.setUint8(i, dataView.getUint8(i));\n\n    return ret;\n  }\n\n  function decode(data, tagger, simpleValue) {\n    var dataView = new DataView(data);\n    var offset = 0;\n    if (typeof tagger !== \"function\") tagger = function (value) {\n      return value;\n    };\n    if (typeof simpleValue !== \"function\") simpleValue = function () {\n      return undefined;\n    };\n\n    function read(value, length) {\n      offset += length;\n      return value;\n    }\n\n    function readArrayBuffer(length) {\n      return read(new Uint8Array(data, offset, length), length);\n    }\n\n    function readFloat16() {\n      var tempArrayBuffer = new ArrayBuffer(4);\n      var tempDataView = new DataView(tempArrayBuffer);\n      var value = readUint16();\n      var sign = value & 0x8000;\n      var exponent = value & 0x7c00;\n      var fraction = value & 0x03ff;\n      if (exponent === 0x7c00) exponent = 0xff << 10;else if (exponent !== 0) exponent += 127 - 15 << 10;else if (fraction !== 0) return fraction * POW_2_24;\n      tempDataView.setUint32(0, sign << 16 | exponent << 13 | fraction << 13);\n      return tempDataView.getFloat32(0);\n    }\n\n    function readFloat32() {\n      return read(dataView.getFloat32(offset), 4);\n    }\n\n    function readFloat64() {\n      return read(dataView.getFloat64(offset), 8);\n    }\n\n    function readUint8() {\n      return read(dataView.getUint8(offset), 1);\n    }\n\n    function readUint16() {\n      return read(dataView.getUint16(offset), 2);\n    }\n\n    function readUint32() {\n      return read(dataView.getUint32(offset), 4);\n    }\n\n    function readUint64() {\n      return readUint32() * POW_2_32 + readUint32();\n    }\n\n    function readBreak() {\n      if (dataView.getUint8(offset) !== 0xff) return false;\n      offset += 1;\n      return true;\n    }\n\n    function readLength(additionalInformation) {\n      if (additionalInformation < 24) return additionalInformation;\n      if (additionalInformation === 24) return readUint8();\n      if (additionalInformation === 25) return readUint16();\n      if (additionalInformation === 26) return readUint32();\n      if (additionalInformation === 27) return readUint64();\n      if (additionalInformation === 31) return -1;\n      throw \"Invalid length encoding\";\n    }\n\n    function readIndefiniteStringLength(majorType) {\n      var initialByte = readUint8();\n      if (initialByte === 0xff) return -1;\n      var length = readLength(initialByte & 0x1f);\n      if (length < 0 || initialByte >> 5 !== majorType) throw \"Invalid indefinite length element\";\n      return length;\n    }\n\n    function appendUtf16data(utf16data, length) {\n      for (var i = 0; i < length; ++i) {\n        var value = readUint8();\n\n        if (value & 0x80) {\n          if (value < 0xe0) {\n            value = (value & 0x1f) << 6 | readUint8() & 0x3f;\n            length -= 1;\n          } else if (value < 0xf0) {\n            value = (value & 0x0f) << 12 | (readUint8() & 0x3f) << 6 | readUint8() & 0x3f;\n            length -= 2;\n          } else {\n            value = (value & 0x0f) << 18 | (readUint8() & 0x3f) << 12 | (readUint8() & 0x3f) << 6 | readUint8() & 0x3f;\n            length -= 3;\n          }\n        }\n\n        if (value < 0x10000) {\n          utf16data.push(value);\n        } else {\n          value -= 0x10000;\n          utf16data.push(0xd800 | value >> 10);\n          utf16data.push(0xdc00 | value & 0x3ff);\n        }\n      }\n    }\n\n    function decodeItem() {\n      var initialByte = readUint8();\n      var majorType = initialByte >> 5;\n      var additionalInformation = initialByte & 0x1f;\n      var i;\n      var length;\n\n      if (majorType === 7) {\n        switch (additionalInformation) {\n          case 25:\n            return readFloat16();\n\n          case 26:\n            return readFloat32();\n\n          case 27:\n            return readFloat64();\n        }\n      }\n\n      length = readLength(additionalInformation);\n      if (length < 0 && (majorType < 2 || 6 < majorType)) throw \"Invalid length\";\n\n      switch (majorType) {\n        case 0:\n          return length;\n\n        case 1:\n          return -1 - length;\n\n        case 2:\n          if (length < 0) {\n            var elements = [];\n            var fullArrayLength = 0;\n\n            while ((length = readIndefiniteStringLength(majorType)) >= 0) {\n              fullArrayLength += length;\n              elements.push(readArrayBuffer(length));\n            }\n\n            var fullArray = new Uint8Array(fullArrayLength);\n            var fullArrayOffset = 0;\n\n            for (i = 0; i < elements.length; ++i) {\n              fullArray.set(elements[i], fullArrayOffset);\n              fullArrayOffset += elements[i].length;\n            }\n\n            return fullArray;\n          }\n\n          return readArrayBuffer(length);\n\n        case 3:\n          var utf16data = [];\n\n          if (length < 0) {\n            while ((length = readIndefiniteStringLength(majorType)) >= 0) appendUtf16data(utf16data, length);\n          } else appendUtf16data(utf16data, length);\n\n          return String.fromCharCode.apply(null, utf16data);\n\n        case 4:\n          var retArray;\n\n          if (length < 0) {\n            retArray = [];\n\n            while (!readBreak()) retArray.push(decodeItem());\n          } else {\n            retArray = new Array(length);\n\n            for (i = 0; i < length; ++i) retArray[i] = decodeItem();\n          }\n\n          return retArray;\n\n        case 5:\n          var retObject = {};\n\n          for (i = 0; i < length || length < 0 && !readBreak(); ++i) {\n            var key = decodeItem();\n            retObject[key] = decodeItem();\n          }\n\n          return retObject;\n\n        case 6:\n          return tagger(decodeItem(), length);\n\n        case 7:\n          switch (length) {\n            case 20:\n              return false;\n\n            case 21:\n              return true;\n\n            case 22:\n              return null;\n\n            case 23:\n              return undefined;\n\n            default:\n              return simpleValue(length);\n          }\n\n      }\n    }\n\n    var ret = decodeItem();\n    if (offset !== data.byteLength) throw \"Remaining bytes\";\n    return ret;\n  }\n\n  var obj = {\n    encode: encode,\n    decode: decode\n  };\n  if (typeof define === \"function\" && define.amd) define(\"cbor/cbor\", obj);else if (typeof module !== 'undefined' && module.exports) module.exports = obj;else if (!global.CBOR) global.CBOR = obj;\n})(this);","map":{"version":3,"sources":["/Users/julien/Sites/react-ros-robot/node_modules/cbor-js/cbor.js"],"names":["global","undefined","POW_2_24","Math","pow","POW_2_32","POW_2_53","encode","value","data","ArrayBuffer","dataView","DataView","lastLength","offset","ensureSpace","length","newByteLength","byteLength","requiredLength","oldDataView","uint32count","i","setUint32","getUint32","write","writeFloat64","setFloat64","writeUint8","setUint8","writeUint8Array","writeUint16","setUint16","writeUint32","writeUint64","low","high","writeTypeAndLength","type","encodeItem","floor","utf8data","charCode","charCodeAt","push","Array","isArray","Uint8Array","keys","Object","key","slice","ret","retView","getUint8","decode","tagger","simpleValue","read","readArrayBuffer","readFloat16","tempArrayBuffer","tempDataView","readUint16","sign","exponent","fraction","getFloat32","readFloat32","readFloat64","getFloat64","readUint8","getUint16","readUint32","readUint64","readBreak","readLength","additionalInformation","readIndefiniteStringLength","majorType","initialByte","appendUtf16data","utf16data","decodeItem","elements","fullArrayLength","fullArray","fullArrayOffset","set","String","fromCharCode","apply","retArray","retObject","obj","define","amd","module","exports","CBOR"],"mappings":"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","sourcesContent":["/*\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2014 Patrick Gansterer <paroga@paroga.com>\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n(function(global, undefined) { \"use strict\";\r\nvar POW_2_24 = Math.pow(2, -24),\r\n    POW_2_32 = Math.pow(2, 32),\r\n    POW_2_53 = Math.pow(2, 53);\r\n\r\nfunction encode(value) {\r\n  var data = new ArrayBuffer(256);\r\n  var dataView = new DataView(data);\r\n  var lastLength;\r\n  var offset = 0;\r\n\r\n  function ensureSpace(length) {\r\n    var newByteLength = data.byteLength;\r\n    var requiredLength = offset + length;\r\n    while (newByteLength < requiredLength)\r\n      newByteLength *= 2;\r\n    if (newByteLength !== data.byteLength) {\r\n      var oldDataView = dataView;\r\n      data = new ArrayBuffer(newByteLength);\r\n      dataView = new DataView(data);\r\n      var uint32count = (offset + 3) >> 2;\r\n      for (var i = 0; i < uint32count; ++i)\r\n        dataView.setUint32(i * 4, oldDataView.getUint32(i * 4));\r\n    }\r\n\r\n    lastLength = length;\r\n    return dataView;\r\n  }\r\n  function write() {\r\n    offset += lastLength;\r\n  }\r\n  function writeFloat64(value) {\r\n    write(ensureSpace(8).setFloat64(offset, value));\r\n  }\r\n  function writeUint8(value) {\r\n    write(ensureSpace(1).setUint8(offset, value));\r\n  }\r\n  function writeUint8Array(value) {\r\n    var dataView = ensureSpace(value.length);\r\n    for (var i = 0; i < value.length; ++i)\r\n      dataView.setUint8(offset + i, value[i]);\r\n    write();\r\n  }\r\n  function writeUint16(value) {\r\n    write(ensureSpace(2).setUint16(offset, value));\r\n  }\r\n  function writeUint32(value) {\r\n    write(ensureSpace(4).setUint32(offset, value));\r\n  }\r\n  function writeUint64(value) {\r\n    var low = value % POW_2_32;\r\n    var high = (value - low) / POW_2_32;\r\n    var dataView = ensureSpace(8);\r\n    dataView.setUint32(offset, high);\r\n    dataView.setUint32(offset + 4, low);\r\n    write();\r\n  }\r\n  function writeTypeAndLength(type, length) {\r\n    if (length < 24) {\r\n      writeUint8(type << 5 | length);\r\n    } else if (length < 0x100) {\r\n      writeUint8(type << 5 | 24);\r\n      writeUint8(length);\r\n    } else if (length < 0x10000) {\r\n      writeUint8(type << 5 | 25);\r\n      writeUint16(length);\r\n    } else if (length < 0x100000000) {\r\n      writeUint8(type << 5 | 26);\r\n      writeUint32(length);\r\n    } else {\r\n      writeUint8(type << 5 | 27);\r\n      writeUint64(length);\r\n    }\r\n  }\r\n  \r\n  function encodeItem(value) {\r\n    var i;\r\n\r\n    if (value === false)\r\n      return writeUint8(0xf4);\r\n    if (value === true)\r\n      return writeUint8(0xf5);\r\n    if (value === null)\r\n      return writeUint8(0xf6);\r\n    if (value === undefined)\r\n      return writeUint8(0xf7);\r\n  \r\n    switch (typeof value) {\r\n      case \"number\":\r\n        if (Math.floor(value) === value) {\r\n          if (0 <= value && value <= POW_2_53)\r\n            return writeTypeAndLength(0, value);\r\n          if (-POW_2_53 <= value && value < 0)\r\n            return writeTypeAndLength(1, -(value + 1));\r\n        }\r\n        writeUint8(0xfb);\r\n        return writeFloat64(value);\r\n\r\n      case \"string\":\r\n        var utf8data = [];\r\n        for (i = 0; i < value.length; ++i) {\r\n          var charCode = value.charCodeAt(i);\r\n          if (charCode < 0x80) {\r\n            utf8data.push(charCode);\r\n          } else if (charCode < 0x800) {\r\n            utf8data.push(0xc0 | charCode >> 6);\r\n            utf8data.push(0x80 | charCode & 0x3f);\r\n          } else if (charCode < 0xd800) {\r\n            utf8data.push(0xe0 | charCode >> 12);\r\n            utf8data.push(0x80 | (charCode >> 6)  & 0x3f);\r\n            utf8data.push(0x80 | charCode & 0x3f);\r\n          } else {\r\n            charCode = (charCode & 0x3ff) << 10;\r\n            charCode |= value.charCodeAt(++i) & 0x3ff;\r\n            charCode += 0x10000;\r\n\r\n            utf8data.push(0xf0 | charCode >> 18);\r\n            utf8data.push(0x80 | (charCode >> 12)  & 0x3f);\r\n            utf8data.push(0x80 | (charCode >> 6)  & 0x3f);\r\n            utf8data.push(0x80 | charCode & 0x3f);\r\n          }\r\n        }\r\n\r\n        writeTypeAndLength(3, utf8data.length);\r\n        return writeUint8Array(utf8data);\r\n\r\n      default:\r\n        var length;\r\n        if (Array.isArray(value)) {\r\n          length = value.length;\r\n          writeTypeAndLength(4, length);\r\n          for (i = 0; i < length; ++i)\r\n            encodeItem(value[i]);\r\n        } else if (value instanceof Uint8Array) {\r\n          writeTypeAndLength(2, value.length);\r\n          writeUint8Array(value);\r\n        } else {\r\n          var keys = Object.keys(value);\r\n          length = keys.length;\r\n          writeTypeAndLength(5, length);\r\n          for (i = 0; i < length; ++i) {\r\n            var key = keys[i];\r\n            encodeItem(key);\r\n            encodeItem(value[key]);\r\n          }\r\n        }\r\n    }\r\n  }\r\n  \r\n  encodeItem(value);\r\n\r\n  if (\"slice\" in data)\r\n    return data.slice(0, offset);\r\n  \r\n  var ret = new ArrayBuffer(offset);\r\n  var retView = new DataView(ret);\r\n  for (var i = 0; i < offset; ++i)\r\n    retView.setUint8(i, dataView.getUint8(i));\r\n  return ret;\r\n}\r\n\r\nfunction decode(data, tagger, simpleValue) {\r\n  var dataView = new DataView(data);\r\n  var offset = 0;\r\n  \r\n  if (typeof tagger !== \"function\")\r\n    tagger = function(value) { return value; };\r\n  if (typeof simpleValue !== \"function\")\r\n    simpleValue = function() { return undefined; };\r\n\r\n  function read(value, length) {\r\n    offset += length;\r\n    return value;\r\n  }\r\n  function readArrayBuffer(length) {\r\n    return read(new Uint8Array(data, offset, length), length);\r\n  }\r\n  function readFloat16() {\r\n    var tempArrayBuffer = new ArrayBuffer(4);\r\n    var tempDataView = new DataView(tempArrayBuffer);\r\n    var value = readUint16();\r\n\r\n    var sign = value & 0x8000;\r\n    var exponent = value & 0x7c00;\r\n    var fraction = value & 0x03ff;\r\n    \r\n    if (exponent === 0x7c00)\r\n      exponent = 0xff << 10;\r\n    else if (exponent !== 0)\r\n      exponent += (127 - 15) << 10;\r\n    else if (fraction !== 0)\r\n      return fraction * POW_2_24;\r\n    \r\n    tempDataView.setUint32(0, sign << 16 | exponent << 13 | fraction << 13);\r\n    return tempDataView.getFloat32(0);\r\n  }\r\n  function readFloat32() {\r\n    return read(dataView.getFloat32(offset), 4);\r\n  }\r\n  function readFloat64() {\r\n    return read(dataView.getFloat64(offset), 8);\r\n  }\r\n  function readUint8() {\r\n    return read(dataView.getUint8(offset), 1);\r\n  }\r\n  function readUint16() {\r\n    return read(dataView.getUint16(offset), 2);\r\n  }\r\n  function readUint32() {\r\n    return read(dataView.getUint32(offset), 4);\r\n  }\r\n  function readUint64() {\r\n    return readUint32() * POW_2_32 + readUint32();\r\n  }\r\n  function readBreak() {\r\n    if (dataView.getUint8(offset) !== 0xff)\r\n      return false;\r\n    offset += 1;\r\n    return true;\r\n  }\r\n  function readLength(additionalInformation) {\r\n    if (additionalInformation < 24)\r\n      return additionalInformation;\r\n    if (additionalInformation === 24)\r\n      return readUint8();\r\n    if (additionalInformation === 25)\r\n      return readUint16();\r\n    if (additionalInformation === 26)\r\n      return readUint32();\r\n    if (additionalInformation === 27)\r\n      return readUint64();\r\n    if (additionalInformation === 31)\r\n      return -1;\r\n    throw \"Invalid length encoding\";\r\n  }\r\n  function readIndefiniteStringLength(majorType) {\r\n    var initialByte = readUint8();\r\n    if (initialByte === 0xff)\r\n      return -1;\r\n    var length = readLength(initialByte & 0x1f);\r\n    if (length < 0 || (initialByte >> 5) !== majorType)\r\n      throw \"Invalid indefinite length element\";\r\n    return length;\r\n  }\r\n\r\n  function appendUtf16data(utf16data, length) {\r\n    for (var i = 0; i < length; ++i) {\r\n      var value = readUint8();\r\n      if (value & 0x80) {\r\n        if (value < 0xe0) {\r\n          value = (value & 0x1f) <<  6\r\n                | (readUint8() & 0x3f);\r\n          length -= 1;\r\n        } else if (value < 0xf0) {\r\n          value = (value & 0x0f) << 12\r\n                | (readUint8() & 0x3f) << 6\r\n                | (readUint8() & 0x3f);\r\n          length -= 2;\r\n        } else {\r\n          value = (value & 0x0f) << 18\r\n                | (readUint8() & 0x3f) << 12\r\n                | (readUint8() & 0x3f) << 6\r\n                | (readUint8() & 0x3f);\r\n          length -= 3;\r\n        }\r\n      }\r\n\r\n      if (value < 0x10000) {\r\n        utf16data.push(value);\r\n      } else {\r\n        value -= 0x10000;\r\n        utf16data.push(0xd800 | (value >> 10));\r\n        utf16data.push(0xdc00 | (value & 0x3ff));\r\n      }\r\n    }\r\n  }\r\n\r\n  function decodeItem() {\r\n    var initialByte = readUint8();\r\n    var majorType = initialByte >> 5;\r\n    var additionalInformation = initialByte & 0x1f;\r\n    var i;\r\n    var length;\r\n\r\n    if (majorType === 7) {\r\n      switch (additionalInformation) {\r\n        case 25:\r\n          return readFloat16();\r\n        case 26:\r\n          return readFloat32();\r\n        case 27:\r\n          return readFloat64();\r\n      }\r\n    }\r\n\r\n    length = readLength(additionalInformation);\r\n    if (length < 0 && (majorType < 2 || 6 < majorType))\r\n      throw \"Invalid length\";\r\n\r\n    switch (majorType) {\r\n      case 0:\r\n        return length;\r\n      case 1:\r\n        return -1 - length;\r\n      case 2:\r\n        if (length < 0) {\r\n          var elements = [];\r\n          var fullArrayLength = 0;\r\n          while ((length = readIndefiniteStringLength(majorType)) >= 0) {\r\n            fullArrayLength += length;\r\n            elements.push(readArrayBuffer(length));\r\n          }\r\n          var fullArray = new Uint8Array(fullArrayLength);\r\n          var fullArrayOffset = 0;\r\n          for (i = 0; i < elements.length; ++i) {\r\n            fullArray.set(elements[i], fullArrayOffset);\r\n            fullArrayOffset += elements[i].length;\r\n          }\r\n          return fullArray;\r\n        }\r\n        return readArrayBuffer(length);\r\n      case 3:\r\n        var utf16data = [];\r\n        if (length < 0) {\r\n          while ((length = readIndefiniteStringLength(majorType)) >= 0)\r\n            appendUtf16data(utf16data, length);\r\n        } else\r\n          appendUtf16data(utf16data, length);\r\n        return String.fromCharCode.apply(null, utf16data);\r\n      case 4:\r\n        var retArray;\r\n        if (length < 0) {\r\n          retArray = [];\r\n          while (!readBreak())\r\n            retArray.push(decodeItem());\r\n        } else {\r\n          retArray = new Array(length);\r\n          for (i = 0; i < length; ++i)\r\n            retArray[i] = decodeItem();\r\n        }\r\n        return retArray;\r\n      case 5:\r\n        var retObject = {};\r\n        for (i = 0; i < length || length < 0 && !readBreak(); ++i) {\r\n          var key = decodeItem();\r\n          retObject[key] = decodeItem();\r\n        }\r\n        return retObject;\r\n      case 6:\r\n        return tagger(decodeItem(), length);\r\n      case 7:\r\n        switch (length) {\r\n          case 20:\r\n            return false;\r\n          case 21:\r\n            return true;\r\n          case 22:\r\n            return null;\r\n          case 23:\r\n            return undefined;\r\n          default:\r\n            return simpleValue(length);\r\n        }\r\n    }\r\n  }\r\n\r\n  var ret = decodeItem();\r\n  if (offset !== data.byteLength)\r\n    throw \"Remaining bytes\";\r\n  return ret;\r\n}\r\n\r\nvar obj = { encode: encode, decode: decode };\r\n\r\nif (typeof define === \"function\" && define.amd)\r\n  define(\"cbor/cbor\", obj);\r\nelse if (typeof module !== 'undefined' && module.exports)\r\n  module.exports = obj;\r\nelse if (!global.CBOR)\r\n  global.CBOR = obj;\r\n\r\n})(this);\r\n"]},"metadata":{},"sourceType":"script"}