{"ast":null,"code":"/**\n * @fileOverview\n * @author Benjamin Pitzer - ben.pitzer@gmail.com\n * @author Russell Toris - rctoris@wpi.edu\n */\nvar UrdfMaterial = require('./UrdfMaterial');\n\nvar UrdfLink = require('./UrdfLink');\n\nvar UrdfJoint = require('./UrdfJoint');\n\nvar DOMParser = require('@xmldom/xmldom').DOMParser; // See https://developer.mozilla.org/docs/XPathResult#Constants\n\n\nvar XPATH_FIRST_ORDERED_NODE_TYPE = 9;\n/**\n * A URDF Model can be used to parse a given URDF into the appropriate elements.\n *\n * @constructor\n * @param options - object with following keys:\n *  * xml - the XML element to parse\n *  * string - the XML element to parse as a string\n */\n\nfunction UrdfModel(options) {\n  options = options || {};\n  var xmlDoc = options.xml;\n  var string = options.string;\n  this.materials = {};\n  this.links = {};\n  this.joints = {}; // Check if we are using a string or an XML element\n\n  if (string) {\n    // Parse the string\n    var parser = new DOMParser();\n    xmlDoc = parser.parseFromString(string, 'text/xml');\n  } // Initialize the model with the given XML node.\n  // Get the robot tag\n\n\n  var robotXml = xmlDoc.documentElement; // Get the robot name\n\n  this.name = robotXml.getAttribute('name'); // Parse all the visual elements we need\n\n  for (var nodes = robotXml.childNodes, i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n\n    if (node.tagName === 'material') {\n      var material = new UrdfMaterial({\n        xml: node\n      }); // Make sure this is unique\n\n      if (this.materials[material.name] !== void 0) {\n        if (this.materials[material.name].isLink()) {\n          this.materials[material.name].assign(material);\n        } else {\n          console.warn('Material ' + material.name + 'is not unique.');\n        }\n      } else {\n        this.materials[material.name] = material;\n      }\n    } else if (node.tagName === 'link') {\n      var link = new UrdfLink({\n        xml: node\n      }); // Make sure this is unique\n\n      if (this.links[link.name] !== void 0) {\n        console.warn('Link ' + link.name + ' is not unique.');\n      } else {\n        // Check for a material\n        for (var j = 0; j < link.visuals.length; j++) {\n          var mat = link.visuals[j].material;\n\n          if (mat !== null && mat.name) {\n            if (this.materials[mat.name] !== void 0) {\n              link.visuals[j].material = this.materials[mat.name];\n            } else {\n              this.materials[mat.name] = mat;\n            }\n          }\n        } // Add the link\n\n\n        this.links[link.name] = link;\n      }\n    } else if (node.tagName === 'joint') {\n      var joint = new UrdfJoint({\n        xml: node\n      });\n      this.joints[joint.name] = joint;\n    }\n  }\n}\n\nmodule.exports = UrdfModel;","map":{"version":3,"sources":["/Users/julien/Sites/react-ros-robot/node_modules/roslib/src/urdf/UrdfModel.js"],"names":["UrdfMaterial","require","UrdfLink","UrdfJoint","DOMParser","XPATH_FIRST_ORDERED_NODE_TYPE","UrdfModel","options","xmlDoc","xml","string","materials","links","joints","parser","parseFromString","robotXml","documentElement","name","getAttribute","nodes","childNodes","i","length","node","tagName","material","isLink","assign","console","warn","link","j","visuals","mat","joint","module","exports"],"mappings":"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","sourcesContent":["/**\n * @fileOverview\n * @author Benjamin Pitzer - ben.pitzer@gmail.com\n * @author Russell Toris - rctoris@wpi.edu\n */\n\nvar UrdfMaterial = require('./UrdfMaterial');\nvar UrdfLink = require('./UrdfLink');\nvar UrdfJoint = require('./UrdfJoint');\nvar DOMParser = require('@xmldom/xmldom').DOMParser;\n\n// See https://developer.mozilla.org/docs/XPathResult#Constants\nvar XPATH_FIRST_ORDERED_NODE_TYPE = 9;\n\n/**\n * A URDF Model can be used to parse a given URDF into the appropriate elements.\n *\n * @constructor\n * @param options - object with following keys:\n *  * xml - the XML element to parse\n *  * string - the XML element to parse as a string\n */\nfunction UrdfModel(options) {\n  options = options || {};\n  var xmlDoc = options.xml;\n  var string = options.string;\n  this.materials = {};\n  this.links = {};\n  this.joints = {};\n\n  // Check if we are using a string or an XML element\n  if (string) {\n    // Parse the string\n    var parser = new DOMParser();\n    xmlDoc = parser.parseFromString(string, 'text/xml');\n  }\n\n  // Initialize the model with the given XML node.\n  // Get the robot tag\n  var robotXml = xmlDoc.documentElement;\n\n  // Get the robot name\n  this.name = robotXml.getAttribute('name');\n\n  // Parse all the visual elements we need\n  for (var nodes = robotXml.childNodes, i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n    if (node.tagName === 'material') {\n      var material = new UrdfMaterial({\n        xml : node\n      });\n      // Make sure this is unique\n      if (this.materials[material.name] !== void 0) {\n        if( this.materials[material.name].isLink() ) {\n          this.materials[material.name].assign( material );\n        } else {\n          console.warn('Material ' + material.name + 'is not unique.');\n        }\n      } else {\n        this.materials[material.name] = material;\n      }\n    } else if (node.tagName === 'link') {\n      var link = new UrdfLink({\n        xml : node\n      });\n      // Make sure this is unique\n      if (this.links[link.name] !== void 0) {\n        console.warn('Link ' + link.name + ' is not unique.');\n      } else {\n        // Check for a material\n        for( var j=0; j<link.visuals.length; j++ )\n        {\n          var mat = link.visuals[j].material;\n          if ( mat !== null && mat.name ) {\n            if (this.materials[mat.name] !== void 0) {\n              link.visuals[j].material = this.materials[mat.name];\n            } else {\n              this.materials[mat.name] = mat;\n            }\n          }\n        }\n\n        // Add the link\n        this.links[link.name] = link;\n      }\n    } else if (node.tagName === 'joint') {\n      var joint = new UrdfJoint({\n        xml : node\n      });\n      this.joints[joint.name] = joint;\n    }\n  }\n}\n\nmodule.exports = UrdfModel;\n"]},"metadata":{},"sourceType":"script"}