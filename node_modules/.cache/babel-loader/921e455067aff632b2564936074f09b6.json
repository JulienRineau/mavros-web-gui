{"ast":null,"code":"/**\n * @fileOverview\n * @author Russell Toris - rctoris@wpi.edu\n */\nvar Topic = require('../core/Topic');\n\nvar Message = require('../core/Message');\n\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\n/**\n * An actionlib action client.\n *\n * Emits the following events:\n *  * 'timeout' - if a timeout occurred while sending a goal\n *  * 'status' - the status messages received from the action server\n *  * 'feedback' -  the feedback messages received from the action server\n *  * 'result' - the result returned from the action server\n *\n *  @constructor\n *  @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * serverName - the action server name, like /fibonacci\n *   * actionName - the action message name, like 'actionlib_tutorials/FibonacciAction'\n *   * timeout - the timeout length when connecting to the action server\n */\n\n\nfunction ActionClient(options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  this.serverName = options.serverName;\n  this.actionName = options.actionName;\n  this.timeout = options.timeout;\n  this.omitFeedback = options.omitFeedback;\n  this.omitStatus = options.omitStatus;\n  this.omitResult = options.omitResult;\n  this.goals = {}; // flag to check if a status has been received\n\n  var receivedStatus = false; // create the topics associated with actionlib\n\n  this.feedbackListener = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/feedback',\n    messageType: this.actionName + 'Feedback'\n  });\n  this.statusListener = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/status',\n    messageType: 'actionlib_msgs/GoalStatusArray'\n  });\n  this.resultListener = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/result',\n    messageType: this.actionName + 'Result'\n  });\n  this.goalTopic = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/goal',\n    messageType: this.actionName + 'Goal'\n  });\n  this.cancelTopic = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/cancel',\n    messageType: 'actionlib_msgs/GoalID'\n  }); // advertise the goal and cancel topics\n\n  this.goalTopic.advertise();\n  this.cancelTopic.advertise(); // subscribe to the status topic\n\n  if (!this.omitStatus) {\n    this.statusListener.subscribe(function (statusMessage) {\n      receivedStatus = true;\n      statusMessage.status_list.forEach(function (status) {\n        var goal = that.goals[status.goal_id.id];\n\n        if (goal) {\n          goal.emit('status', status);\n        }\n      });\n    });\n  } // subscribe the the feedback topic\n\n\n  if (!this.omitFeedback) {\n    this.feedbackListener.subscribe(function (feedbackMessage) {\n      var goal = that.goals[feedbackMessage.status.goal_id.id];\n\n      if (goal) {\n        goal.emit('status', feedbackMessage.status);\n        goal.emit('feedback', feedbackMessage.feedback);\n      }\n    });\n  } // subscribe to the result topic\n\n\n  if (!this.omitResult) {\n    this.resultListener.subscribe(function (resultMessage) {\n      var goal = that.goals[resultMessage.status.goal_id.id];\n\n      if (goal) {\n        goal.emit('status', resultMessage.status);\n        goal.emit('result', resultMessage.result);\n      }\n    });\n  } // If timeout specified, emit a 'timeout' event if the action server does not respond\n\n\n  if (this.timeout) {\n    setTimeout(function () {\n      if (!receivedStatus) {\n        that.emit('timeout');\n      }\n    }, this.timeout);\n  }\n}\n\nActionClient.prototype.__proto__ = EventEmitter2.prototype;\n/**\n * Cancel all goals associated with this ActionClient.\n */\n\nActionClient.prototype.cancel = function () {\n  var cancelMessage = new Message();\n  this.cancelTopic.publish(cancelMessage);\n};\n/**\n * Unsubscribe and unadvertise all topics associated with this ActionClient.\n */\n\n\nActionClient.prototype.dispose = function () {\n  this.goalTopic.unadvertise();\n  this.cancelTopic.unadvertise();\n\n  if (!this.omitStatus) {\n    this.statusListener.unsubscribe();\n  }\n\n  if (!this.omitFeedback) {\n    this.feedbackListener.unsubscribe();\n  }\n\n  if (!this.omitResult) {\n    this.resultListener.unsubscribe();\n  }\n};\n\nmodule.exports = ActionClient;","map":{"version":3,"sources":["/Users/julien/Sites/react-ros-robot/node_modules/roslib/src/actionlib/ActionClient.js"],"names":["Topic","require","Message","EventEmitter2","ActionClient","options","that","ros","serverName","actionName","timeout","omitFeedback","omitStatus","omitResult","goals","receivedStatus","feedbackListener","name","messageType","statusListener","resultListener","goalTopic","cancelTopic","advertise","subscribe","statusMessage","status_list","forEach","status","goal","goal_id","id","emit","feedbackMessage","feedback","resultMessage","result","setTimeout","prototype","__proto__","cancel","cancelMessage","publish","dispose","unadvertise","unsubscribe","module","exports"],"mappings":"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","sourcesContent":["/**\n * @fileOverview\n * @author Russell Toris - rctoris@wpi.edu\n */\n\nvar Topic = require('../core/Topic');\nvar Message = require('../core/Message');\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\n\n/**\n * An actionlib action client.\n *\n * Emits the following events:\n *  * 'timeout' - if a timeout occurred while sending a goal\n *  * 'status' - the status messages received from the action server\n *  * 'feedback' -  the feedback messages received from the action server\n *  * 'result' - the result returned from the action server\n *\n *  @constructor\n *  @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * serverName - the action server name, like /fibonacci\n *   * actionName - the action message name, like 'actionlib_tutorials/FibonacciAction'\n *   * timeout - the timeout length when connecting to the action server\n */\nfunction ActionClient(options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  this.serverName = options.serverName;\n  this.actionName = options.actionName;\n  this.timeout = options.timeout;\n  this.omitFeedback = options.omitFeedback;\n  this.omitStatus = options.omitStatus;\n  this.omitResult = options.omitResult;\n  this.goals = {};\n\n  // flag to check if a status has been received\n  var receivedStatus = false;\n\n  // create the topics associated with actionlib\n  this.feedbackListener = new Topic({\n    ros : this.ros,\n    name : this.serverName + '/feedback',\n    messageType : this.actionName + 'Feedback'\n  });\n\n  this.statusListener = new Topic({\n    ros : this.ros,\n    name : this.serverName + '/status',\n    messageType : 'actionlib_msgs/GoalStatusArray'\n  });\n\n  this.resultListener = new Topic({\n    ros : this.ros,\n    name : this.serverName + '/result',\n    messageType : this.actionName + 'Result'\n  });\n\n  this.goalTopic = new Topic({\n    ros : this.ros,\n    name : this.serverName + '/goal',\n    messageType : this.actionName + 'Goal'\n  });\n\n  this.cancelTopic = new Topic({\n    ros : this.ros,\n    name : this.serverName + '/cancel',\n    messageType : 'actionlib_msgs/GoalID'\n  });\n\n  // advertise the goal and cancel topics\n  this.goalTopic.advertise();\n  this.cancelTopic.advertise();\n\n  // subscribe to the status topic\n  if (!this.omitStatus) {\n    this.statusListener.subscribe(function(statusMessage) {\n      receivedStatus = true;\n      statusMessage.status_list.forEach(function(status) {\n        var goal = that.goals[status.goal_id.id];\n        if (goal) {\n          goal.emit('status', status);\n        }\n      });\n    });\n  }\n\n  // subscribe the the feedback topic\n  if (!this.omitFeedback) {\n    this.feedbackListener.subscribe(function(feedbackMessage) {\n      var goal = that.goals[feedbackMessage.status.goal_id.id];\n      if (goal) {\n        goal.emit('status', feedbackMessage.status);\n        goal.emit('feedback', feedbackMessage.feedback);\n      }\n    });\n  }\n\n  // subscribe to the result topic\n  if (!this.omitResult) {\n    this.resultListener.subscribe(function(resultMessage) {\n      var goal = that.goals[resultMessage.status.goal_id.id];\n\n      if (goal) {\n        goal.emit('status', resultMessage.status);\n        goal.emit('result', resultMessage.result);\n      }\n    });\n  }\n\n  // If timeout specified, emit a 'timeout' event if the action server does not respond\n  if (this.timeout) {\n    setTimeout(function() {\n      if (!receivedStatus) {\n        that.emit('timeout');\n      }\n    }, this.timeout);\n  }\n}\n\nActionClient.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * Cancel all goals associated with this ActionClient.\n */\nActionClient.prototype.cancel = function() {\n  var cancelMessage = new Message();\n  this.cancelTopic.publish(cancelMessage);\n};\n\n/**\n * Unsubscribe and unadvertise all topics associated with this ActionClient.\n */\nActionClient.prototype.dispose = function() {\n  this.goalTopic.unadvertise();\n  this.cancelTopic.unadvertise();\n  if (!this.omitStatus) {this.statusListener.unsubscribe();}\n  if (!this.omitFeedback) {this.feedbackListener.unsubscribe();}\n  if (!this.omitResult) {this.resultListener.unsubscribe();}\n};\n\nmodule.exports = ActionClient;\n"]},"metadata":{},"sourceType":"script"}