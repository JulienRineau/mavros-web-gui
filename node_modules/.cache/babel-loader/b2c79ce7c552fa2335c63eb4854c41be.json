{"ast":null,"code":"var _jsxFileName = \"/Users/julien/Sites/react-ros-robot/src/components/Buttons/Arm.jsx\";\nimport React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Arm extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ros: null,\n      arming: null\n    };\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros(); // Using window bc using CDN for ROSLIB and not NPM package\n\n    console.log(this.state.ros); // Changing changing button color according to connection state\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"Connection established.\");\n      this.setState({\n        connected: true\n      });\n    });\n    this.state.ros.on(\"close\", () => {\n      console.log(\"Connection closed.\");\n      this.setState({\n        connected: false\n      }); //try to reconnect every 2 seconds\n\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n\n  arm() {\n    console.log(\"Arm button clicked\");\n    var arming = new window.ROSLIB.Service({\n      ros: this.state.ros,\n      name: \"/mavros/cmd/arming\",\n      serviceType: \"mavros_msgs/CommandBool\"\n    });\n    var request = new window.ROSLIB.ServiceRequest({\n      value: true\n    });\n    arming.callService(request, function (result) {\n      console.log(\"Result for \" + arming.name + \":\" + JSON.stringify(result));\n    });\n  }\n\n  sayHello() {\n    alert(\"Hello!\");\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Button, {\n      onClick: this.arm,\n      variant: \"primary\",\n      children: \"Arm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Arm;","map":{"version":3,"sources":["/Users/julien/Sites/react-ros-robot/src/components/Buttons/Arm.jsx"],"names":["React","Component","Button","Arm","constructor","state","ros","arming","init_connection","window","ROSLIB","Ros","console","log","on","setState","connected","setTimeout","connect","Config","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","RECONNECTION_TIMER","arm","Service","name","serviceType","request","ServiceRequest","value","callService","result","JSON","stringify","sayHello","alert","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,iBAAvB;;;AAEA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAE1BG,EAAAA,WAAW,GAAG;AACZ;AADY,SADdC,KACc,GADN;AAAEC,MAAAA,GAAG,EAAE,IAAP;AAAaC,MAAAA,MAAM,EAAE;AAArB,KACM;AAEZ,SAAKC,eAAL;AACD;;AAEDA,EAAAA,eAAe,GAAG;AAChB,SAAKH,KAAL,CAAWC,GAAX,GAAiB,IAAIG,MAAM,CAACC,MAAP,CAAcC,GAAlB,EAAjB,CADgB,CAC0B;;AAC1CC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKR,KAAL,CAAWC,GAAvB,EAFgB,CAIhB;;AACA,SAAKD,KAAL,CAAWC,GAAX,CAAeQ,EAAf,CAAkB,YAAlB,EAAgC,MAAM;AACpCF,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,WAAKE,QAAL,CAAc;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAd;AACD,KAHD;AAKA,SAAKX,KAAL,CAAWC,GAAX,CAAeQ,EAAf,CAAkB,OAAlB,EAA2B,MAAM;AAC/BF,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,WAAKE,QAAL,CAAc;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAd,EAF+B,CAG/B;;AACAC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAI;AACF,eAAKZ,KAAL,CAAWC,GAAX,CAAeY,OAAf,CACE,UACEC,MAAM,CAACC,mBADT,GAEE,GAFF,GAGED,MAAM,CAACE,qBAHT,GAIE,EALJ;AAOD,SARD,CAQE,OAAOC,KAAP,EAAc;AACdV,UAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD;AACF,OAZS,EAYPM,MAAM,CAACI,kBAZA,CAAV;AAaD,KAjBD;;AAmBA,QAAI;AACF,WAAKlB,KAAL,CAAWC,GAAX,CAAeY,OAAf,CACE,UACEC,MAAM,CAACC,mBADT,GAEE,GAFF,GAGED,MAAM,CAACE,qBAHT,GAIE,EALJ;AAOD,KARD,CAQE,OAAOC,KAAP,EAAc;AACdV,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD;AACF;;AAEDW,EAAAA,GAAG,GAAG;AACJZ,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,QAAIN,MAAM,GAAG,IAAIE,MAAM,CAACC,MAAP,CAAce,OAAlB,CAA0B;AACrCnB,MAAAA,GAAG,EAAE,KAAKD,KAAL,CAAWC,GADqB;AAErCoB,MAAAA,IAAI,EAAE,oBAF+B;AAGrCC,MAAAA,WAAW,EAAE;AAHwB,KAA1B,CAAb;AAMA,QAAIC,OAAO,GAAG,IAAInB,MAAM,CAACC,MAAP,CAAcmB,cAAlB,CAAiC;AAC7CC,MAAAA,KAAK,EAAE;AADsC,KAAjC,CAAd;AAIAvB,IAAAA,MAAM,CAACwB,WAAP,CAAmBH,OAAnB,EAA4B,UAAUI,MAAV,EAAkB;AAC5CpB,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBN,MAAM,CAACmB,IAAvB,GAA8B,GAA9B,GAAoCO,IAAI,CAACC,SAAL,CAAeF,MAAf,CAAhD;AACD,KAFD;AAGD;;AAEDG,EAAAA,QAAQ,GAAG;AACTC,IAAAA,KAAK,CAAC,QAAD,CAAL;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAKb,GAAtB;AAA2B,MAAA,OAAO,EAAC,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AA5EyB;;AA+E5B,eAAerB,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\n\nclass Arm extends Component {\n  state = { ros: null, arming: null };\n  constructor() {\n    super();\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros(); // Using window bc using CDN for ROSLIB and not NPM package\n    console.log(this.state.ros);\n\n    // Changing changing button color according to connection state\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"Connection established.\");\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"Connection closed.\");\n      this.setState({ connected: false });\n      //try to reconnect every 2 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n\n  arm() {\n    console.log(\"Arm button clicked\");\n    var arming = new window.ROSLIB.Service({\n      ros: this.state.ros,\n      name: \"/mavros/cmd/arming\",\n      serviceType: \"mavros_msgs/CommandBool\",\n    });\n\n    var request = new window.ROSLIB.ServiceRequest({\n      value: true,\n    });\n\n    arming.callService(request, function (result) {\n      console.log(\"Result for \" + arming.name + \":\" + JSON.stringify(result));\n    });\n  }\n\n  sayHello() {\n    alert(\"Hello!\");\n  }\n\n  render() {\n    return (\n      <Button onClick={this.arm} variant=\"primary\">\n        Arm\n      </Button>\n    );\n  }\n}\n\nexport default Arm;\n"]},"metadata":{},"sourceType":"module"}