{"ast":null,"code":"var _jsxFileName = \"/Users/julien/Sites/react-ros-robot/src/components/Buttons/Disarm.jsx\";\nimport React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport Config from \"../../scripts/config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Disarm extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ros: null,\n      arming: null\n    };\n    this.init_connection();\n    this.disarm = this.disarm.bind(this);\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros(); // Using window bc using CDN for ROSLIB and not NPM package\n\n    console.log(this.state.ros); // Changing changing button color according to connection state\n\n    this.state.ros.on(\"connection\", () => {\n      this.setState({\n        connected: true\n      });\n    });\n    this.state.ros.on(\"close\", () => {\n      this.setState({\n        connected: false\n      }); //try to reconnect every 2 seconds\n\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n\n  disarm() {\n    console.log(\"Arm button clicked\");\n    var arming = new window.ROSLIB.Service({\n      ros: this.state.ros,\n      name: \"/mavros/cmd/arming\",\n      serviceType: \"mavros_msgs/CommandBool\"\n    });\n    var request = new window.ROSLIB.ServiceRequest({\n      value: false\n    });\n    arming.callService(request, function (result) {\n      console.log(\"Result for \" + arming.name + \":\" + JSON.stringify(result));\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Button, {\n      onClick: this.adisarmrdisarmm,\n      variant: \"danger\",\n      children: \"Disarm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Disarm;","map":{"version":3,"sources":["/Users/julien/Sites/react-ros-robot/src/components/Buttons/Disarm.jsx"],"names":["React","Component","Button","Config","Disarm","constructor","state","ros","arming","init_connection","disarm","bind","window","ROSLIB","Ros","console","log","on","setState","connected","setTimeout","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","RECONNECTION_TIMER","Service","name","serviceType","request","ServiceRequest","value","callService","result","JSON","stringify","render","adisarmrdisarmm"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;;AAEA,MAAMC,MAAN,SAAqBH,SAArB,CAA+B;AAE7BI,EAAAA,WAAW,GAAG;AACZ;AADY,SADdC,KACc,GADN;AAAEC,MAAAA,GAAG,EAAE,IAAP;AAAaC,MAAAA,MAAM,EAAE;AAArB,KACM;AAEZ,SAAKC,eAAL;AAEA,SAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAd;AACD;;AAEDF,EAAAA,eAAe,GAAG;AAChB,SAAKH,KAAL,CAAWC,GAAX,GAAiB,IAAIK,MAAM,CAACC,MAAP,CAAcC,GAAlB,EAAjB,CADgB,CAC0B;;AAC1CC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,KAAL,CAAWC,GAAvB,EAFgB,CAIhB;;AACA,SAAKD,KAAL,CAAWC,GAAX,CAAeU,EAAf,CAAkB,YAAlB,EAAgC,MAAM;AACpC,WAAKC,QAAL,CAAc;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAd;AACD,KAFD;AAIA,SAAKb,KAAL,CAAWC,GAAX,CAAeU,EAAf,CAAkB,OAAlB,EAA2B,MAAM;AAC/B,WAAKC,QAAL,CAAc;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAd,EAD+B,CAE/B;;AACAC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAI;AACF,eAAKd,KAAL,CAAWC,GAAX,CAAec,OAAf,CACE,UACElB,MAAM,CAACmB,mBADT,GAEE,GAFF,GAGEnB,MAAM,CAACoB,qBAHT,GAIE,EALJ;AAOD,SARD,CAQE,OAAOC,KAAP,EAAc;AACdT,UAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD;AACF,OAZS,EAYPb,MAAM,CAACsB,kBAZA,CAAV;AAaD,KAhBD;;AAkBA,QAAI;AACF,WAAKnB,KAAL,CAAWC,GAAX,CAAec,OAAf,CACE,UACElB,MAAM,CAACmB,mBADT,GAEE,GAFF,GAGEnB,MAAM,CAACoB,qBAHT,GAIE,EALJ;AAOD,KARD,CAQE,OAAOC,KAAP,EAAc;AACdT,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD;AACF;;AAEDN,EAAAA,MAAM,GAAG;AACPK,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,QAAIR,MAAM,GAAG,IAAII,MAAM,CAACC,MAAP,CAAca,OAAlB,CAA0B;AACrCnB,MAAAA,GAAG,EAAE,KAAKD,KAAL,CAAWC,GADqB;AAErCoB,MAAAA,IAAI,EAAE,oBAF+B;AAGrCC,MAAAA,WAAW,EAAE;AAHwB,KAA1B,CAAb;AAMA,QAAIC,OAAO,GAAG,IAAIjB,MAAM,CAACC,MAAP,CAAciB,cAAlB,CAAiC;AAC7CC,MAAAA,KAAK,EAAE;AADsC,KAAjC,CAAd;AAIAvB,IAAAA,MAAM,CAACwB,WAAP,CAAmBH,OAAnB,EAA4B,UAAUI,MAAV,EAAkB;AAC5ClB,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBR,MAAM,CAACmB,IAAvB,GAA8B,GAA9B,GAAoCO,IAAI,CAACC,SAAL,CAAeF,MAAf,CAAhD;AACD,KAFD;AAGD;;AAEDG,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAKC,eAAtB;AAAuC,MAAA,OAAO,EAAC,QAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAxE4B;;AA2E/B,eAAejC,MAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport Config from \"../../scripts/config\";\n\nclass Disarm extends Component {\n  state = { ros: null, arming: null };\n  constructor() {\n    super();\n    this.init_connection();\n\n    this.disarm = this.disarm.bind(this);\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros(); // Using window bc using CDN for ROSLIB and not NPM package\n    console.log(this.state.ros);\n\n    // Changing changing button color according to connection state\n    this.state.ros.on(\"connection\", () => {\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      this.setState({ connected: false });\n      //try to reconnect every 2 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n\n  disarm() {\n    console.log(\"Arm button clicked\");\n    var arming = new window.ROSLIB.Service({\n      ros: this.state.ros,\n      name: \"/mavros/cmd/arming\",\n      serviceType: \"mavros_msgs/CommandBool\",\n    });\n\n    var request = new window.ROSLIB.ServiceRequest({\n      value: false,\n    });\n\n    arming.callService(request, function (result) {\n      console.log(\"Result for \" + arming.name + \":\" + JSON.stringify(result));\n    });\n  }\n\n  render() {\n    return (\n      <Button onClick={this.adisarmrdisarmm} variant=\"danger\">\n        Disarm\n      </Button>\n    );\n  }\n}\n\nexport default Disarm;\n"]},"metadata":{},"sourceType":"module"}