{"ast":null,"code":"var _jsxFileName = \"/Users/julien/Sites/react-ros-robot/src/components/Connection.jsx\";\nimport React, { Component } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport Config from \"../scripts/config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Connection extends Component {\n  constructor() {\n    super();\n    this.state = {\n      connected: false,\n      ros: null,\n      mode: null\n    };\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros(); // Using window bc using CDN for ROSLIB and not NPM package\n\n    console.log(this.state.ros); // Changing changing button color according to connection state\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"Connection established.\");\n      this.setState({\n        connected: true\n      });\n    });\n    this.state.ros.on(\"close\", () => {\n      console.log(\"Connection closed.\");\n      this.setState({\n        connected: false\n      }); //try to reconnect every 2 seconds\n\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n\n  componentDidMount() {\n    this.getDroneState();\n  }\n\n  getDroneState() {\n    // create a pose subscriber\n    var state_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: \"/mavros/state\",\n      messageType: \"mavros_msgs/State\"\n    });\n    state_subscriber.subscribe(message => {\n      this.setState({\n        mode: message.armed\n      });\n    });\n  }\n\n  render() {\n    if (this.state.connected) {\n      var connexion_state = \"Drone Connected\";\n    } else {\n      var connexion_state = \"Drone Disconnected\";\n    }\n\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      className: \"text-center my-4\",\n      variant: this.state.connected ? \"success\" : \"danger\",\n      children: this.connexion_state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Connection;","map":{"version":3,"sources":["/Users/julien/Sites/react-ros-robot/src/components/Connection.jsx"],"names":["React","Component","Alert","Config","Connection","constructor","state","connected","ros","mode","init_connection","window","ROSLIB","Ros","console","log","on","setState","setTimeout","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","RECONNECTION_TIMER","componentDidMount","getDroneState","state_subscriber","Topic","name","messageType","subscribe","message","armed","render","connexion_state"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport Config from \"../scripts/config\";\n\nclass Connection extends Component {\n  state = { connected: false, ros: null, mode: null };\n\n  constructor() {\n    super();\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros(); // Using window bc using CDN for ROSLIB and not NPM package\n    console.log(this.state.ros);\n\n    // Changing changing button color according to connection state\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"Connection established.\");\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"Connection closed.\");\n      this.setState({ connected: false });\n      //try to reconnect every 2 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n\n  componentDidMount() {\n    this.getDroneState();\n  }\n\n  getDroneState() {\n    // create a pose subscriber\n    var state_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: \"/mavros/state\",\n      messageType: \"mavros_msgs/State\",\n    });\n\n    state_subscriber.subscribe((message) => {\n      this.setState({ mode: message.armed });\n    });\n  }\n\n  render() {\n    if (this.state.connected) {\n      var connexion_state = \"Drone Connected\";\n    } else {\n      var connexion_state = \"Drone Disconnected\";\n    }\n    return (\n      <Alert\n        className=\"text-center my-4\"\n        variant={this.state.connected ? \"success\" : \"danger\"}\n      >\n        {this.connexion_state}\n      </Alert>\n    );\n  }\n}\n\nexport default Connection;\n"]},"metadata":{},"sourceType":"module"}