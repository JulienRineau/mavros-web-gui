{"ast":null,"code":"/**\n * Socket event handling utilities for handling events on either\n * WebSocket and TCP sockets\n *\n * Note to anyone reviewing this code: these functions are called\n * in the context of their parent object, unless bound\n * @fileOverview\n */\n'use strict';\n\nvar decompressPng = require('../util/decompressPng');\n\nvar CBOR = require('cbor-js');\n\nvar typedArrayTagger = require('../util/cborTypedArrayTags');\n\nvar BSON = null;\n\nif (typeof bson !== 'undefined') {\n  BSON = bson().BSON;\n}\n/**\n * Events listeners for a WebSocket or TCP socket to a JavaScript\n * ROS Client. Sets up Messages for a given topic to trigger an\n * event on the ROS client.\n *\n * @namespace SocketAdapter\n * @private\n */\n\n\nfunction SocketAdapter(client) {\n  var decoder = null;\n\n  if (client.transportOptions.decoder) {\n    decoder = client.transportOptions.decoder;\n  }\n\n  function handleMessage(message) {\n    if (message.op === 'publish') {\n      client.emit(message.topic, message.msg);\n    } else if (message.op === 'service_response') {\n      client.emit(message.id, message);\n    } else if (message.op === 'call_service') {\n      client.emit(message.service, message);\n    } else if (message.op === 'status') {\n      if (message.id) {\n        client.emit('status:' + message.id, message);\n      } else {\n        client.emit('status', message);\n      }\n    }\n  }\n\n  function handlePng(message, callback) {\n    if (message.op === 'png') {\n      decompressPng(message.data, callback);\n    } else {\n      callback(message);\n    }\n  }\n\n  function decodeBSON(data, callback) {\n    if (!BSON) {\n      throw 'Cannot process BSON encoded message without BSON header.';\n    }\n\n    var reader = new FileReader();\n\n    reader.onload = function () {\n      var uint8Array = new Uint8Array(this.result);\n      var msg = BSON.deserialize(uint8Array);\n      callback(msg);\n    };\n\n    reader.readAsArrayBuffer(data);\n  }\n\n  return {\n    /**\n     * Emits a 'connection' event on WebSocket connection.\n     *\n     * @param event - the argument to emit with the event.\n     * @memberof SocketAdapter\n     */\n    onopen: function onOpen(event) {\n      client.isConnected = true;\n      client.emit('connection', event);\n    },\n\n    /**\n     * Emits a 'close' event on WebSocket disconnection.\n     *\n     * @param event - the argument to emit with the event.\n     * @memberof SocketAdapter\n     */\n    onclose: function onClose(event) {\n      client.isConnected = false;\n      client.emit('close', event);\n    },\n\n    /**\n     * Emits an 'error' event whenever there was an error.\n     *\n     * @param event - the argument to emit with the event.\n     * @memberof SocketAdapter\n     */\n    onerror: function onError(event) {\n      client.emit('error', event);\n    },\n\n    /**\n     * Parses message responses from rosbridge and sends to the appropriate\n     * topic, service, or param.\n     *\n     * @param message - the raw JSON message from rosbridge.\n     * @memberof SocketAdapter\n     */\n    onmessage: function onMessage(data) {\n      if (decoder) {\n        decoder(data.data, function (message) {\n          handleMessage(message);\n        });\n      } else if (typeof Blob !== 'undefined' && data.data instanceof Blob) {\n        decodeBSON(data.data, function (message) {\n          handlePng(message, handleMessage);\n        });\n      } else if (data.data instanceof ArrayBuffer) {\n        var decoded = CBOR.decode(data.data, typedArrayTagger);\n        handleMessage(decoded);\n      } else {\n        var message = JSON.parse(typeof data === 'string' ? data : data.data);\n        handlePng(message, handleMessage);\n      }\n    }\n  };\n}\n\nmodule.exports = SocketAdapter;","map":{"version":3,"sources":["/Users/julien/Sites/react-ros-robot/node_modules/roslib/src/core/SocketAdapter.js"],"names":["decompressPng","require","CBOR","typedArrayTagger","BSON","bson","SocketAdapter","client","decoder","transportOptions","handleMessage","message","op","emit","topic","msg","id","service","handlePng","callback","data","decodeBSON","reader","FileReader","onload","uint8Array","Uint8Array","result","deserialize","readAsArrayBuffer","onopen","onOpen","event","isConnected","onclose","onClose","onerror","onError","onmessage","onMessage","Blob","ArrayBuffer","decoded","decode","JSON","parse","module","exports"],"mappings":"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","sourcesContent":["/**\n * Socket event handling utilities for handling events on either\n * WebSocket and TCP sockets\n *\n * Note to anyone reviewing this code: these functions are called\n * in the context of their parent object, unless bound\n * @fileOverview\n */\n'use strict';\n\nvar decompressPng = require('../util/decompressPng');\nvar CBOR = require('cbor-js');\nvar typedArrayTagger = require('../util/cborTypedArrayTags');\nvar BSON = null;\nif(typeof bson !== 'undefined'){\n    BSON = bson().BSON;\n}\n\n/**\n * Events listeners for a WebSocket or TCP socket to a JavaScript\n * ROS Client. Sets up Messages for a given topic to trigger an\n * event on the ROS client.\n *\n * @namespace SocketAdapter\n * @private\n */\nfunction SocketAdapter(client) {\n\n  var decoder = null;\n  if (client.transportOptions.decoder) {\n    decoder = client.transportOptions.decoder;\n  }\n\n  function handleMessage(message) {\n    if (message.op === 'publish') {\n      client.emit(message.topic, message.msg);\n    } else if (message.op === 'service_response') {\n      client.emit(message.id, message);\n    } else if (message.op === 'call_service') {\n      client.emit(message.service, message);\n    } else if(message.op === 'status'){\n      if(message.id){\n        client.emit('status:'+message.id, message);\n      } else {\n        client.emit('status', message);\n      }\n    }\n  }\n\n  function handlePng(message, callback) {\n    if (message.op === 'png') {\n      decompressPng(message.data, callback);\n    } else {\n      callback(message);\n    }\n  }\n\n  function decodeBSON(data, callback) {\n    if (!BSON) {\n      throw 'Cannot process BSON encoded message without BSON header.';\n    }\n    var reader = new FileReader();\n    reader.onload  = function() {\n      var uint8Array = new Uint8Array(this.result);\n      var msg = BSON.deserialize(uint8Array);\n      callback(msg);\n    };\n    reader.readAsArrayBuffer(data);\n  }\n\n  return {\n    /**\n     * Emits a 'connection' event on WebSocket connection.\n     *\n     * @param event - the argument to emit with the event.\n     * @memberof SocketAdapter\n     */\n    onopen: function onOpen(event) {\n      client.isConnected = true;\n      client.emit('connection', event);\n    },\n\n    /**\n     * Emits a 'close' event on WebSocket disconnection.\n     *\n     * @param event - the argument to emit with the event.\n     * @memberof SocketAdapter\n     */\n    onclose: function onClose(event) {\n      client.isConnected = false;\n      client.emit('close', event);\n    },\n\n    /**\n     * Emits an 'error' event whenever there was an error.\n     *\n     * @param event - the argument to emit with the event.\n     * @memberof SocketAdapter\n     */\n    onerror: function onError(event) {\n      client.emit('error', event);\n    },\n\n    /**\n     * Parses message responses from rosbridge and sends to the appropriate\n     * topic, service, or param.\n     *\n     * @param message - the raw JSON message from rosbridge.\n     * @memberof SocketAdapter\n     */\n    onmessage: function onMessage(data) {\n      if (decoder) {\n        decoder(data.data, function (message) {\n          handleMessage(message);\n        });\n      } else if (typeof Blob !== 'undefined' && data.data instanceof Blob) {\n        decodeBSON(data.data, function (message) {\n          handlePng(message, handleMessage);\n        });\n      } else if (data.data instanceof ArrayBuffer) {\n        var decoded = CBOR.decode(data.data, typedArrayTagger);\n        handleMessage(decoded);\n      } else {\n        var message = JSON.parse(typeof data === 'string' ? data : data.data);\n        handlePng(message, handleMessage);\n      }\n    }\n  };\n}\n\nmodule.exports = SocketAdapter;\n"]},"metadata":{},"sourceType":"script"}