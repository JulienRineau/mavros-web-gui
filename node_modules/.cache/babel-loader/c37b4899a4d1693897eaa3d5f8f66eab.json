{"ast":null,"code":"/**\n * @fileOverview\n * @author Russell Toris - rctoris@wpi.edu\n */\nvar Message = require('../core/Message');\n\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\n/**\n * An actionlib goal goal is associated with an action server.\n *\n * Emits the following events:\n *  * 'timeout' - if a timeout occurred while sending a goal\n *\n *  @constructor\n *  @param object with following keys:\n *   * actionClient - the ROSLIB.ActionClient to use with this goal\n *   * goalMessage - The JSON object containing the goal for the action server\n */\n\n\nfunction Goal(options) {\n  var that = this;\n  this.actionClient = options.actionClient;\n  this.goalMessage = options.goalMessage;\n  this.isFinished = false; // Used to create random IDs\n\n  var date = new Date(); // Create a random ID\n\n  this.goalID = 'goal_' + Math.random() + '_' + date.getTime(); // Fill in the goal message\n\n  this.goalMessage = new Message({\n    goal_id: {\n      stamp: {\n        secs: 0,\n        nsecs: 0\n      },\n      id: this.goalID\n    },\n    goal: this.goalMessage\n  });\n  this.on('status', function (status) {\n    that.status = status;\n  });\n  this.on('result', function (result) {\n    that.isFinished = true;\n    that.result = result;\n  });\n  this.on('feedback', function (feedback) {\n    that.feedback = feedback;\n  }); // Add the goal\n\n  this.actionClient.goals[this.goalID] = this;\n}\n\nGoal.prototype.__proto__ = EventEmitter2.prototype;\n/**\n * Send the goal to the action server.\n *\n * @param timeout (optional) - a timeout length for the goal's result\n */\n\nGoal.prototype.send = function (timeout) {\n  var that = this;\n  that.actionClient.goalTopic.publish(that.goalMessage);\n\n  if (timeout) {\n    setTimeout(function () {\n      if (!that.isFinished) {\n        that.emit('timeout');\n      }\n    }, timeout);\n  }\n};\n/**\n * Cancel the current goal.\n */\n\n\nGoal.prototype.cancel = function () {\n  var cancelMessage = new Message({\n    id: this.goalID\n  });\n  this.actionClient.cancelTopic.publish(cancelMessage);\n};\n\nmodule.exports = Goal;","map":{"version":3,"sources":["/Users/julien/Sites/react-ros-robot/node_modules/roslib/src/actionlib/Goal.js"],"names":["Message","require","EventEmitter2","Goal","options","that","actionClient","goalMessage","isFinished","date","Date","goalID","Math","random","getTime","goal_id","stamp","secs","nsecs","id","goal","on","status","result","feedback","goals","prototype","__proto__","send","timeout","goalTopic","publish","setTimeout","emit","cancel","cancelMessage","cancelTopic","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,iBAAD,CAArB;;AACA,IAAIC,aAAa,GAAGD,OAAO,CAAC,eAAD,CAAP,CAAyBC,aAA7C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,IAAT,CAAcC,OAAd,EAAuB;AACrB,MAAIC,IAAI,GAAG,IAAX;AACA,OAAKC,YAAL,GAAoBF,OAAO,CAACE,YAA5B;AACA,OAAKC,WAAL,GAAmBH,OAAO,CAACG,WAA3B;AACA,OAAKC,UAAL,GAAkB,KAAlB,CAJqB,CAMrB;;AACA,MAAIC,IAAI,GAAG,IAAIC,IAAJ,EAAX,CAPqB,CASrB;;AACA,OAAKC,MAAL,GAAc,UAAUC,IAAI,CAACC,MAAL,EAAV,GAA0B,GAA1B,GAAgCJ,IAAI,CAACK,OAAL,EAA9C,CAVqB,CAWrB;;AACA,OAAKP,WAAL,GAAmB,IAAIP,OAAJ,CAAY;AAC7Be,IAAAA,OAAO,EAAG;AACRC,MAAAA,KAAK,EAAG;AACNC,QAAAA,IAAI,EAAG,CADD;AAENC,QAAAA,KAAK,EAAG;AAFF,OADA;AAKRC,MAAAA,EAAE,EAAG,KAAKR;AALF,KADmB;AAQ7BS,IAAAA,IAAI,EAAG,KAAKb;AARiB,GAAZ,CAAnB;AAWA,OAAKc,EAAL,CAAQ,QAAR,EAAkB,UAASC,MAAT,EAAiB;AACjCjB,IAAAA,IAAI,CAACiB,MAAL,GAAcA,MAAd;AACD,GAFD;AAIA,OAAKD,EAAL,CAAQ,QAAR,EAAkB,UAASE,MAAT,EAAiB;AACjClB,IAAAA,IAAI,CAACG,UAAL,GAAkB,IAAlB;AACAH,IAAAA,IAAI,CAACkB,MAAL,GAAcA,MAAd;AACD,GAHD;AAKA,OAAKF,EAAL,CAAQ,UAAR,EAAoB,UAASG,QAAT,EAAmB;AACrCnB,IAAAA,IAAI,CAACmB,QAAL,GAAgBA,QAAhB;AACD,GAFD,EAhCqB,CAoCrB;;AACA,OAAKlB,YAAL,CAAkBmB,KAAlB,CAAwB,KAAKd,MAA7B,IAAuC,IAAvC;AACD;;AAEDR,IAAI,CAACuB,SAAL,CAAeC,SAAf,GAA2BzB,aAAa,CAACwB,SAAzC;AAEA;AACA;AACA;AACA;AACA;;AACAvB,IAAI,CAACuB,SAAL,CAAeE,IAAf,GAAsB,UAASC,OAAT,EAAkB;AACtC,MAAIxB,IAAI,GAAG,IAAX;AACAA,EAAAA,IAAI,CAACC,YAAL,CAAkBwB,SAAlB,CAA4BC,OAA5B,CAAoC1B,IAAI,CAACE,WAAzC;;AACA,MAAIsB,OAAJ,EAAa;AACXG,IAAAA,UAAU,CAAC,YAAW;AACpB,UAAI,CAAC3B,IAAI,CAACG,UAAV,EAAsB;AACpBH,QAAAA,IAAI,CAAC4B,IAAL,CAAU,SAAV;AACD;AACF,KAJS,EAIPJ,OAJO,CAAV;AAKD;AACF,CAVD;AAYA;AACA;AACA;;;AACA1B,IAAI,CAACuB,SAAL,CAAeQ,MAAf,GAAwB,YAAW;AACjC,MAAIC,aAAa,GAAG,IAAInC,OAAJ,CAAY;AAC9BmB,IAAAA,EAAE,EAAG,KAAKR;AADoB,GAAZ,CAApB;AAGA,OAAKL,YAAL,CAAkB8B,WAAlB,CAA8BL,OAA9B,CAAsCI,aAAtC;AACD,CALD;;AAOAE,MAAM,CAACC,OAAP,GAAiBnC,IAAjB","sourcesContent":["/**\n * @fileOverview\n * @author Russell Toris - rctoris@wpi.edu\n */\n\nvar Message = require('../core/Message');\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\n\n/**\n * An actionlib goal goal is associated with an action server.\n *\n * Emits the following events:\n *  * 'timeout' - if a timeout occurred while sending a goal\n *\n *  @constructor\n *  @param object with following keys:\n *   * actionClient - the ROSLIB.ActionClient to use with this goal\n *   * goalMessage - The JSON object containing the goal for the action server\n */\nfunction Goal(options) {\n  var that = this;\n  this.actionClient = options.actionClient;\n  this.goalMessage = options.goalMessage;\n  this.isFinished = false;\n\n  // Used to create random IDs\n  var date = new Date();\n\n  // Create a random ID\n  this.goalID = 'goal_' + Math.random() + '_' + date.getTime();\n  // Fill in the goal message\n  this.goalMessage = new Message({\n    goal_id : {\n      stamp : {\n        secs : 0,\n        nsecs : 0\n      },\n      id : this.goalID\n    },\n    goal : this.goalMessage\n  });\n\n  this.on('status', function(status) {\n    that.status = status;\n  });\n\n  this.on('result', function(result) {\n    that.isFinished = true;\n    that.result = result;\n  });\n\n  this.on('feedback', function(feedback) {\n    that.feedback = feedback;\n  });\n\n  // Add the goal\n  this.actionClient.goals[this.goalID] = this;\n}\n\nGoal.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * Send the goal to the action server.\n *\n * @param timeout (optional) - a timeout length for the goal's result\n */\nGoal.prototype.send = function(timeout) {\n  var that = this;\n  that.actionClient.goalTopic.publish(that.goalMessage);\n  if (timeout) {\n    setTimeout(function() {\n      if (!that.isFinished) {\n        that.emit('timeout');\n      }\n    }, timeout);\n  }\n};\n\n/**\n * Cancel the current goal.\n */\nGoal.prototype.cancel = function() {\n  var cancelMessage = new Message({\n    id : this.goalID\n  });\n  this.actionClient.cancelTopic.publish(cancelMessage);\n};\n\nmodule.exports = Goal;"]},"metadata":{},"sourceType":"script"}