{"ast":null,"code":"var _jsxFileName = \"/Users/julien/Sites/mavros-web-gui/src/components/Buttons/Largage.jsx\";\nimport React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport Config from \"../../scripts/config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Largage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ros: null,\n      arming: null,\n      hole: true\n    };\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros(); // Using window bc using CDN for ROSLIB and not NPM package\n\n    console.log(this.state.ros); // Changing changing button color according to connection state\n\n    this.state.ros.on(\"connection\", () => {\n      this.setState({\n        connected: true\n      });\n    });\n    this.state.ros.on(\"close\", () => {\n      this.setState({\n        connected: false\n      }); //try to reconnect every 2 seconds\n\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n\n  componentDidMount() {\n    this.larg = this.larg.bind(this);\n    this.init_connection();\n  }\n\n  larg() {\n    console.log(\"Arm button clicked\");\n    var delivering = new window.ROSLIB.Service({\n      ros: this.state.ros,\n      name: \"/delivery_motor\",\n      serviceType: \"td_srvs/SetBool\"\n    });\n    var request = new window.ROSLIB.ServiceRequest({\n      data: this.state.hole\n    });\n    delivering.callService(request, function (result) {\n      console.log(\"Result for \" + delivering.name + \":\" + JSON.stringify(result));\n    });\n    this.setState({\n      hole: !this.state.hole\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Button, {\n      onClick: this.larg,\n      variant: \"primary\",\n      children: \"Deliver\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Largage;","map":{"version":3,"sources":["/Users/julien/Sites/mavros-web-gui/src/components/Buttons/Largage.jsx"],"names":["React","Component","Button","Config","Largage","constructor","state","ros","arming","hole","init_connection","window","ROSLIB","Ros","console","log","on","setState","connected","setTimeout","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","RECONNECTION_TIMER","componentDidMount","larg","bind","delivering","Service","name","serviceType","request","ServiceRequest","data","callService","result","JSON","stringify","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport Config from \"../../scripts/config\";\n\nclass Largage extends Component {\n  state = { ros: null, arming: null, hole: true };\n  constructor() {\n    super();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros(); // Using window bc using CDN for ROSLIB and not NPM package\n    console.log(this.state.ros);\n\n    // Changing changing button color according to connection state\n    this.state.ros.on(\"connection\", () => {\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      this.setState({ connected: false });\n      //try to reconnect every 2 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n\n  componentDidMount() {\n    this.larg = this.larg.bind(this);\n    this.init_connection();\n  }\n\n  larg() {\n    console.log(\"Arm button clicked\");\n    var delivering = new window.ROSLIB.Service({\n      ros: this.state.ros,\n      name: \"/delivery_motor\",\n      serviceType: \"td_srvs/SetBool\",\n    });\n\n    var request = new window.ROSLIB.ServiceRequest({\n      data: this.state.hole,\n    });\n\n    delivering.callService(request, function (result) {\n      console.log(\n        \"Result for \" + delivering.name + \":\" + JSON.stringify(result)\n      );\n    });\n    this.setState({ hole: !this.state.hole });\n  }\n\n  render() {\n    return (\n      <Button onClick={this.larg} variant=\"primary\">\n        Deliver\n      </Button>\n    );\n  }\n}\n\nexport default Largage;\n"]},"metadata":{},"sourceType":"module"}