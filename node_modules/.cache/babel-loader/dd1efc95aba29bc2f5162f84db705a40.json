{"ast":null,"code":"var _jsxFileName = \"/Users/julien/Sites/react-ros-robot/src/components/Connection.jsx\";\nimport React, { Component } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport Config from \"../scripts/config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Connection extends Component {\n  constructor() {\n    super();\n    this.state = {\n      connected: false,\n      ros: null\n    };\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros(); // Using window bc using CDN for ROSLIB and not NPM package\n\n    console.log(this.state.ros); // Changing changing button color according to connection state\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"Connection established.\");\n      this.setState({\n        connected: true\n      });\n    });\n    this.state.ros.on(\"close\", () => {\n      console.log(\"Connection closed.\");\n      this.setState({\n        connected: false\n      }); //try to reconnect every 2 seconds\n\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://172.16.184.144:9090\");\n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, 3000);\n    });\n\n    try {\n      this.state.ros.connect(\"ws://172.16.184.144:9090\");\n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      className: \"text-center my-4\",\n      variant: this.state.connected ? \"success\" : \"danger\",\n      children: this.state.connected ? \"Drone Connected\" : \"Drone Disconnected\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Connection;","map":{"version":3,"sources":["/Users/julien/Sites/react-ros-robot/src/components/Connection.jsx"],"names":["React","Component","Alert","Config","Connection","constructor","state","connected","ros","init_connection","window","ROSLIB","Ros","console","log","on","setState","setTimeout","connect","error","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;;AAEA,MAAMC,UAAN,SAAyBH,SAAzB,CAAmC;AAGjCI,EAAAA,WAAW,GAAG;AACZ;AADY,SAFdC,KAEc,GAFN;AAAEC,MAAAA,SAAS,EAAE,KAAb;AAAoBC,MAAAA,GAAG,EAAE;AAAzB,KAEM;AAEZ,SAAKC,eAAL;AACD;;AAEDA,EAAAA,eAAe,GAAG;AAChB,SAAKH,KAAL,CAAWE,GAAX,GAAiB,IAAIE,MAAM,CAACC,MAAP,CAAcC,GAAlB,EAAjB,CADgB,CAC0B;;AAC1CC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKR,KAAL,CAAWE,GAAvB,EAFgB,CAIhB;;AACA,SAAKF,KAAL,CAAWE,GAAX,CAAeO,EAAf,CAAkB,YAAlB,EAAgC,MAAM;AACpCF,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,WAAKE,QAAL,CAAc;AAAET,QAAAA,SAAS,EAAE;AAAb,OAAd;AACD,KAHD;AAKA,SAAKD,KAAL,CAAWE,GAAX,CAAeO,EAAf,CAAkB,OAAlB,EAA2B,MAAM;AAC/BF,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,WAAKE,QAAL,CAAc;AAAET,QAAAA,SAAS,EAAE;AAAb,OAAd,EAF+B,CAG/B;;AACAU,MAAAA,UAAU,CAAC,MAAM;AACf,YAAI;AACF,eAAKX,KAAL,CAAWE,GAAX,CAAeU,OAAf,CAAuB,0BAAvB;AACD,SAFD,CAEE,OAAOC,KAAP,EAAc;AACdN,UAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD;AACF,OANS,EAMP,IANO,CAAV;AAOD,KAXD;;AAaA,QAAI;AACF,WAAKR,KAAL,CAAWE,GAAX,CAAeU,OAAf,CAAuB,0BAAvB;AACD,KAFD,CAEE,OAAOC,KAAP,EAAc;AACdN,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD;AACF;;AAEDM,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,KAAD;AACE,MAAA,SAAS,EAAC,kBADZ;AAEE,MAAA,OAAO,EAAE,KAAKd,KAAL,CAAWC,SAAX,GAAuB,SAAvB,GAAmC,QAF9C;AAAA,gBAIG,KAAKD,KAAL,CAAWC,SAAX,GAAuB,iBAAvB,GAA2C;AAJ9C;AAAA;AAAA;AAAA;AAAA,YADF;AAQD;;AA/CgC;;AAkDnC,eAAeH,UAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport Config from \"../scripts/config\";\n\nclass Connection extends Component {\n  state = { connected: false, ros: null };\n\n  constructor() {\n    super();\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros(); // Using window bc using CDN for ROSLIB and not NPM package\n    console.log(this.state.ros);\n\n    // Changing changing button color according to connection state\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"Connection established.\");\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"Connection closed.\");\n      this.setState({ connected: false });\n      //try to reconnect every 2 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://172.16.184.144:9090\");\n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, 3000);\n    });\n\n    try {\n      this.state.ros.connect(\"ws://172.16.184.144:9090\");\n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n\n  render() {\n    return (\n      <Alert\n        className=\"text-center my-4\"\n        variant={this.state.connected ? \"success\" : \"danger\"}\n      >\n        {this.state.connected ? \"Drone Connected\" : \"Drone Disconnected\"}\n      </Alert>\n    );\n  }\n}\n\nexport default Connection;\n"]},"metadata":{},"sourceType":"module"}