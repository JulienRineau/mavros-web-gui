{"ast":null,"code":"/**\n * @fileOverview \n * @author Benjamin Pitzer - ben.pitzer@gmail.com\n * @author Russell Toris - rctoris@wpi.edu\n */\nvar Pose = require('../math/Pose');\n\nvar Vector3 = require('../math/Vector3');\n\nvar Quaternion = require('../math/Quaternion');\n\nvar UrdfCylinder = require('./UrdfCylinder');\n\nvar UrdfBox = require('./UrdfBox');\n\nvar UrdfMaterial = require('./UrdfMaterial');\n\nvar UrdfMesh = require('./UrdfMesh');\n\nvar UrdfSphere = require('./UrdfSphere');\n/**\n * A Visual element in a URDF.\n *\n * @constructor\n * @param options - object with following keys:\n *  * xml - the XML element to parse\n */\n\n\nfunction UrdfVisual(options) {\n  var xml = options.xml;\n  this.origin = null;\n  this.geometry = null;\n  this.material = null;\n  this.name = options.xml.getAttribute('name'); // Origin\n\n  var origins = xml.getElementsByTagName('origin');\n\n  if (origins.length === 0) {\n    // use the identity as the default\n    this.origin = new Pose();\n  } else {\n    // Check the XYZ\n    var xyz = origins[0].getAttribute('xyz');\n    var position = new Vector3();\n\n    if (xyz) {\n      xyz = xyz.split(' ');\n      position = new Vector3({\n        x: parseFloat(xyz[0]),\n        y: parseFloat(xyz[1]),\n        z: parseFloat(xyz[2])\n      });\n    } // Check the RPY\n\n\n    var rpy = origins[0].getAttribute('rpy');\n    var orientation = new Quaternion();\n\n    if (rpy) {\n      rpy = rpy.split(' '); // Convert from RPY\n\n      var roll = parseFloat(rpy[0]);\n      var pitch = parseFloat(rpy[1]);\n      var yaw = parseFloat(rpy[2]);\n      var phi = roll / 2.0;\n      var the = pitch / 2.0;\n      var psi = yaw / 2.0;\n      var x = Math.sin(phi) * Math.cos(the) * Math.cos(psi) - Math.cos(phi) * Math.sin(the) * Math.sin(psi);\n      var y = Math.cos(phi) * Math.sin(the) * Math.cos(psi) + Math.sin(phi) * Math.cos(the) * Math.sin(psi);\n      var z = Math.cos(phi) * Math.cos(the) * Math.sin(psi) - Math.sin(phi) * Math.sin(the) * Math.cos(psi);\n      var w = Math.cos(phi) * Math.cos(the) * Math.cos(psi) + Math.sin(phi) * Math.sin(the) * Math.sin(psi);\n      orientation = new Quaternion({\n        x: x,\n        y: y,\n        z: z,\n        w: w\n      });\n      orientation.normalize();\n    }\n\n    this.origin = new Pose({\n      position: position,\n      orientation: orientation\n    });\n  } // Geometry\n\n\n  var geoms = xml.getElementsByTagName('geometry');\n\n  if (geoms.length > 0) {\n    var geom = geoms[0];\n    var shape = null; // Check for the shape\n\n    for (var i = 0; i < geom.childNodes.length; i++) {\n      var node = geom.childNodes[i];\n\n      if (node.nodeType === 1) {\n        shape = node;\n        break;\n      }\n    } // Check the type\n\n\n    var type = shape.nodeName;\n\n    if (type === 'sphere') {\n      this.geometry = new UrdfSphere({\n        xml: shape\n      });\n    } else if (type === 'box') {\n      this.geometry = new UrdfBox({\n        xml: shape\n      });\n    } else if (type === 'cylinder') {\n      this.geometry = new UrdfCylinder({\n        xml: shape\n      });\n    } else if (type === 'mesh') {\n      this.geometry = new UrdfMesh({\n        xml: shape\n      });\n    } else {\n      console.warn('Unknown geometry type ' + type);\n    }\n  } // Material\n\n\n  var materials = xml.getElementsByTagName('material');\n\n  if (materials.length > 0) {\n    this.material = new UrdfMaterial({\n      xml: materials[0]\n    });\n  }\n}\n\nmodule.exports = UrdfVisual;","map":{"version":3,"sources":["/Users/julien/Sites/react-ros-robot/node_modules/roslib/src/urdf/UrdfVisual.js"],"names":["Pose","require","Vector3","Quaternion","UrdfCylinder","UrdfBox","UrdfMaterial","UrdfMesh","UrdfSphere","UrdfVisual","options","xml","origin","geometry","material","name","getAttribute","origins","getElementsByTagName","length","xyz","position","split","x","parseFloat","y","z","rpy","orientation","roll","pitch","yaw","phi","the","psi","Math","sin","cos","w","normalize","geoms","geom","shape","i","childNodes","node","nodeType","type","nodeName","console","warn","materials","module","exports"],"mappings":"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","sourcesContent":["/**\n * @fileOverview \n * @author Benjamin Pitzer - ben.pitzer@gmail.com\n * @author Russell Toris - rctoris@wpi.edu\n */\n\nvar Pose = require('../math/Pose');\nvar Vector3 = require('../math/Vector3');\nvar Quaternion = require('../math/Quaternion');\n\nvar UrdfCylinder = require('./UrdfCylinder');\nvar UrdfBox = require('./UrdfBox');\nvar UrdfMaterial = require('./UrdfMaterial');\nvar UrdfMesh = require('./UrdfMesh');\nvar UrdfSphere = require('./UrdfSphere');\n\n/**\n * A Visual element in a URDF.\n *\n * @constructor\n * @param options - object with following keys:\n *  * xml - the XML element to parse\n */\nfunction UrdfVisual(options) {\n  var xml = options.xml;\n  this.origin = null;\n  this.geometry = null;\n  this.material = null;\n\n  this.name = options.xml.getAttribute('name');\n\n  // Origin\n  var origins = xml.getElementsByTagName('origin');\n  if (origins.length === 0) {\n    // use the identity as the default\n    this.origin = new Pose();\n  } else {\n    // Check the XYZ\n    var xyz = origins[0].getAttribute('xyz');\n    var position = new Vector3();\n    if (xyz) {\n      xyz = xyz.split(' ');\n      position = new Vector3({\n        x : parseFloat(xyz[0]),\n        y : parseFloat(xyz[1]),\n        z : parseFloat(xyz[2])\n      });\n    }\n\n    // Check the RPY\n    var rpy = origins[0].getAttribute('rpy');\n    var orientation = new Quaternion();\n    if (rpy) {\n      rpy = rpy.split(' ');\n      // Convert from RPY\n      var roll = parseFloat(rpy[0]);\n      var pitch = parseFloat(rpy[1]);\n      var yaw = parseFloat(rpy[2]);\n      var phi = roll / 2.0;\n      var the = pitch / 2.0;\n      var psi = yaw / 2.0;\n      var x = Math.sin(phi) * Math.cos(the) * Math.cos(psi) - Math.cos(phi) * Math.sin(the)\n          * Math.sin(psi);\n      var y = Math.cos(phi) * Math.sin(the) * Math.cos(psi) + Math.sin(phi) * Math.cos(the)\n          * Math.sin(psi);\n      var z = Math.cos(phi) * Math.cos(the) * Math.sin(psi) - Math.sin(phi) * Math.sin(the)\n          * Math.cos(psi);\n      var w = Math.cos(phi) * Math.cos(the) * Math.cos(psi) + Math.sin(phi) * Math.sin(the)\n          * Math.sin(psi);\n\n      orientation = new Quaternion({\n        x : x,\n        y : y,\n        z : z,\n        w : w\n      });\n      orientation.normalize();\n    }\n    this.origin = new Pose({\n      position : position,\n      orientation : orientation\n    });\n  }\n\n  // Geometry\n  var geoms = xml.getElementsByTagName('geometry');\n  if (geoms.length > 0) {\n    var geom = geoms[0];\n    var shape = null;\n    // Check for the shape\n    for (var i = 0; i < geom.childNodes.length; i++) {\n      var node = geom.childNodes[i];\n      if (node.nodeType === 1) {\n        shape = node;\n        break;\n      }\n    }\n    // Check the type\n    var type = shape.nodeName;\n    if (type === 'sphere') {\n      this.geometry = new UrdfSphere({\n        xml : shape\n      });\n    } else if (type === 'box') {\n      this.geometry = new UrdfBox({\n        xml : shape\n      });\n    } else if (type === 'cylinder') {\n      this.geometry = new UrdfCylinder({\n        xml : shape\n      });\n    } else if (type === 'mesh') {\n      this.geometry = new UrdfMesh({\n        xml : shape\n      });\n    } else {\n      console.warn('Unknown geometry type ' + type);\n    }\n  }\n\n  // Material\n  var materials = xml.getElementsByTagName('material');\n  if (materials.length > 0) {\n    this.material = new UrdfMaterial({\n      xml : materials[0]\n    });\n  }\n}\n\nmodule.exports = UrdfVisual;"]},"metadata":{},"sourceType":"script"}