{"ast":null,"code":"var _jsxFileName = \"/Users/julien/Sites/react-ros-robot/src/components/Buttons/Land.jsx\";\nimport React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport Config from \"../../scripts/config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Land extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ros: null,\n      arming: null\n    };\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros(); // Using window bc using CDN for ROSLIB and not NPM package\n\n    console.log(this.state.ros); // Changing changing button color according to connection state\n\n    this.state.ros.on(\"connection\", () => {\n      this.setState({\n        connected: true\n      });\n    });\n    this.state.ros.on(\"close\", () => {\n      this.setState({\n        connected: false\n      }); //try to reconnect every 2 seconds\n\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n\n  componentDidMount() {\n    this.land = this.land.bind(this);\n  }\n\n  land() {\n    console.log(\"Arm button clicked\");\n    var landing = new window.ROSLIB.Service({\n      ros: this.state.ros,\n      name: \"/mavros/cmd/land\",\n      serviceType: \"mavros_msgs/CommandBool\"\n    });\n    var request = new window.ROSLIB.ServiceRequest({\n      min_pitch: 0,\n      yaw: 0,\n      latitude: 0,\n      longitude: 0,\n      altitude: 3.0\n    });\n    landing.callService(request, function (result) {\n      console.log(\"Result for \" + landing.name + \":\" + JSON.stringify(result));\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Button, {\n      onClick: this.land,\n      variant: \"danger\",\n      children: \"Land\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Land;","map":{"version":3,"sources":["/Users/julien/Sites/react-ros-robot/src/components/Buttons/Land.jsx"],"names":["React","Component","Button","Config","Land","constructor","state","ros","arming","init_connection","window","ROSLIB","Ros","console","log","on","setState","connected","setTimeout","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","RECONNECTION_TIMER","componentDidMount","land","bind","landing","Service","name","serviceType","request","ServiceRequest","min_pitch","yaw","latitude","longitude","altitude","callService","result","JSON","stringify","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport Config from \"../../scripts/config\";\n\nclass Land extends Component {\n  state = { ros: null, arming: null };\n  constructor() {\n    super();\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros(); // Using window bc using CDN for ROSLIB and not NPM package\n    console.log(this.state.ros);\n\n    // Changing changing button color according to connection state\n    this.state.ros.on(\"connection\", () => {\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      this.setState({ connected: false });\n      //try to reconnect every 2 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n\n  componentDidMount() {\n    this.land = this.land.bind(this);\n  }\n\n  land() {\n    console.log(\"Arm button clicked\");\n    var landing = new window.ROSLIB.Service({\n      ros: this.state.ros,\n      name: \"/mavros/cmd/land\",\n      serviceType: \"mavros_msgs/CommandBool\",\n    });\n\n    var request = new window.ROSLIB.ServiceRequest({\n      min_pitch: 0,\n      yaw: 0,\n      latitude: 0,\n      longitude: 0,\n      altitude: 3.0,\n    });\n\n    landing.callService(request, function (result) {\n      console.log(\"Result for \" + landing.name + \":\" + JSON.stringify(result));\n    });\n  }\n\n  render() {\n    return (\n      <Button onClick={this.land} variant=\"danger\">\n        Land\n      </Button>\n    );\n  }\n}\n\nexport default Land;\n"]},"metadata":{},"sourceType":"module"}