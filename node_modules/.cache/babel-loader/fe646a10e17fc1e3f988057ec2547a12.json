{"ast":null,"code":"/**\n * @fileOverview\n * @author Justin Young - justin@oodar.com.au\n * @author Russell Toris - rctoris@wpi.edu\n */\nvar Topic = require('../core/Topic');\n\nvar Message = require('../core/Message');\n\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\n/**\n * An actionlib action listener\n *\n * Emits the following events:\n *  * 'status' - the status messages received from the action server\n *  * 'feedback' -  the feedback messages received from the action server\n *  * 'result' - the result returned from the action server\n *\n *  @constructor\n *  @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * serverName - the action server name, like /fibonacci\n *   * actionName - the action message name, like 'actionlib_tutorials/FibonacciAction'\n */\n\n\nfunction ActionListener(options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  this.serverName = options.serverName;\n  this.actionName = options.actionName;\n  this.timeout = options.timeout;\n  this.omitFeedback = options.omitFeedback;\n  this.omitStatus = options.omitStatus;\n  this.omitResult = options.omitResult; // create the topics associated with actionlib\n\n  var goalListener = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/goal',\n    messageType: this.actionName + 'Goal'\n  });\n  var feedbackListener = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/feedback',\n    messageType: this.actionName + 'Feedback'\n  });\n  var statusListener = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/status',\n    messageType: 'actionlib_msgs/GoalStatusArray'\n  });\n  var resultListener = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/result',\n    messageType: this.actionName + 'Result'\n  });\n  goalListener.subscribe(function (goalMessage) {\n    that.emit('goal', goalMessage);\n  });\n  statusListener.subscribe(function (statusMessage) {\n    statusMessage.status_list.forEach(function (status) {\n      that.emit('status', status);\n    });\n  });\n  feedbackListener.subscribe(function (feedbackMessage) {\n    that.emit('status', feedbackMessage.status);\n    that.emit('feedback', feedbackMessage.feedback);\n  }); // subscribe to the result topic\n\n  resultListener.subscribe(function (resultMessage) {\n    that.emit('status', resultMessage.status);\n    that.emit('result', resultMessage.result);\n  });\n}\n\nActionListener.prototype.__proto__ = EventEmitter2.prototype;\nmodule.exports = ActionListener;","map":{"version":3,"sources":["/Users/julien/Sites/react-ros-robot/node_modules/roslib/src/actionlib/ActionListener.js"],"names":["Topic","require","Message","EventEmitter2","ActionListener","options","that","ros","serverName","actionName","timeout","omitFeedback","omitStatus","omitResult","goalListener","name","messageType","feedbackListener","statusListener","resultListener","subscribe","goalMessage","emit","statusMessage","status_list","forEach","status","feedbackMessage","feedback","resultMessage","result","prototype","__proto__","module","exports"],"mappings":"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","sourcesContent":["/**\n * @fileOverview\n * @author Justin Young - justin@oodar.com.au\n * @author Russell Toris - rctoris@wpi.edu\n */\n\nvar Topic = require('../core/Topic');\nvar Message = require('../core/Message');\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\n\n/**\n * An actionlib action listener\n *\n * Emits the following events:\n *  * 'status' - the status messages received from the action server\n *  * 'feedback' -  the feedback messages received from the action server\n *  * 'result' - the result returned from the action server\n *\n *  @constructor\n *  @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * serverName - the action server name, like /fibonacci\n *   * actionName - the action message name, like 'actionlib_tutorials/FibonacciAction'\n */\nfunction ActionListener(options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  this.serverName = options.serverName;\n  this.actionName = options.actionName;\n  this.timeout = options.timeout;\n  this.omitFeedback = options.omitFeedback;\n  this.omitStatus = options.omitStatus;\n  this.omitResult = options.omitResult;\n\n\n  // create the topics associated with actionlib\n  var goalListener = new Topic({\n    ros : this.ros,\n    name : this.serverName + '/goal',\n    messageType : this.actionName + 'Goal'\n  });\n\n  var feedbackListener = new Topic({\n    ros : this.ros,\n    name : this.serverName + '/feedback',\n    messageType : this.actionName + 'Feedback'\n  });\n\n  var statusListener = new Topic({\n    ros : this.ros,\n    name : this.serverName + '/status',\n    messageType : 'actionlib_msgs/GoalStatusArray'\n  });\n\n  var resultListener = new Topic({\n    ros : this.ros,\n    name : this.serverName + '/result',\n    messageType : this.actionName + 'Result'\n  });\n\n  goalListener.subscribe(function(goalMessage) {\n      that.emit('goal', goalMessage);\n  });\n\n  statusListener.subscribe(function(statusMessage) {\n      statusMessage.status_list.forEach(function(status) {\n          that.emit('status', status);\n      });\n  });\n\n  feedbackListener.subscribe(function(feedbackMessage) {\n      that.emit('status', feedbackMessage.status);\n      that.emit('feedback', feedbackMessage.feedback);\n  });\n\n  // subscribe to the result topic\n  resultListener.subscribe(function(resultMessage) {\n      that.emit('status', resultMessage.status);\n      that.emit('result', resultMessage.result);\n  });\n\n}\n\nActionListener.prototype.__proto__ = EventEmitter2.prototype;\n\nmodule.exports = ActionListener;\n"]},"metadata":{},"sourceType":"script"}