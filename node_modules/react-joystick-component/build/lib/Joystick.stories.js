"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ReactDOM = require("react-dom");
var react_1 = require("@storybook/react");
var addon_actions_1 = require("@storybook/addon-actions");
var react_parallax_tilt_1 = require("react-parallax-tilt");
var Joystick_1 = require("./Joystick");
var shape_enum_1 = require("./enums/shape.enum");
var react_2 = require("react");
require("./stories.css");
var joystickStories = (0, react_1.storiesOf)('Joystick Examples', module);
joystickStories.add("Default joystick", function () { return React.createElement(Joystick_1.Joystick, { start: (0, addon_actions_1.action)("Started"), move: (0, addon_actions_1.action)("Moved"), stop: (0, addon_actions_1.action)("Stopped") }); });
joystickStories.add("Default joystick with 50% minDistance", function () { return React.createElement(Joystick_1.Joystick, { minDistance: 50, start: (0, addon_actions_1.action)("Started"), move: (0, addon_actions_1.action)("Moved"), stop: (0, addon_actions_1.action)("Stopped") }); });
joystickStories.add("Control plane override", function () { return React.createElement(Joystick_1.Joystick, { start: (0, addon_actions_1.action)("Started"), controlPlaneShape: shape_enum_1.JoystickShape.Square, move: (0, addon_actions_1.action)("Moved"), stop: (0, addon_actions_1.action)("Stopped") }); });
joystickStories.add("Square joystick", function () { return React.createElement("div", { style: { display: 'flex', justifyContent: 'space-around', padding: '25px' } },
    React.createElement(Joystick_1.Joystick, { throttle: 100, start: (0, addon_actions_1.action)("Started"), baseShape: shape_enum_1.JoystickShape.Square, stickShape: shape_enum_1.JoystickShape.Square, move: (0, addon_actions_1.action)("Moved"), stop: (0, addon_actions_1.action)("Stopped") }),
    React.createElement(Joystick_1.Joystick, { throttle: 100, start: (0, addon_actions_1.action)("Started"), baseShape: shape_enum_1.JoystickShape.Square, move: (0, addon_actions_1.action)("Moved"), stop: (0, addon_actions_1.action)("Stopped") })); });
joystickStories.add("Yellow (custom colors) joystick", function () { return React.createElement(Joystick_1.Joystick, { start: (0, addon_actions_1.action)("Started"), baseColor: "#FFFF99", stickColor: "#FFD300", move: (0, addon_actions_1.action)("Moved"), stop: (0, addon_actions_1.action)("Stopped") }); });
joystickStories.add("50ms throttled joystick", function () { return React.createElement(Joystick_1.Joystick, { start: (0, addon_actions_1.action)("Started"), throttle: 50, move: (0, addon_actions_1.action)("Moved"), stop: (0, addon_actions_1.action)("Stopped") }); });
joystickStories.add("100ms throttled joystick", function () { return React.createElement(Joystick_1.Joystick, { start: (0, addon_actions_1.action)("Started"), throttle: 100, move: (0, addon_actions_1.action)("Moved"), stop: (0, addon_actions_1.action)("Stopped") }); });
joystickStories.add("200ms throttled joystick", function () { return React.createElement(Joystick_1.Joystick, { start: (0, addon_actions_1.action)("Started"), throttle: 200, move: (0, addon_actions_1.action)("Moved"), stop: (0, addon_actions_1.action)("Stopped") }); });
joystickStories.add("500ms throttled joystick", function () { return React.createElement(Joystick_1.Joystick, { start: (0, addon_actions_1.action)("Started"), throttle: 500, move: (0, addon_actions_1.action)("Moved"), stop: (0, addon_actions_1.action)("Stopped") }); });
joystickStories.add("Sticky joystick", function () { return React.createElement(Joystick_1.Joystick, { sticky: true, start: (0, addon_actions_1.action)("Started"), throttle: 50, move: (0, addon_actions_1.action)("Moved"), stop: (0, addon_actions_1.action)("Stopped") }); });
joystickStories.add("Images", function () { return React.createElement(Joystick_1.Joystick, { baseImage: "http://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-12/256/fire.png", stickImage: "https://i.imgflip.com/1cf8by.jpg", start: (0, addon_actions_1.action)("Started"), throttle: 50, move: (0, addon_actions_1.action)("Moved"), stop: (0, addon_actions_1.action)("Stopped") }); });
joystickStories.add("Follow Cursor", function () { return (React.createElement("div", { style: { padding: "50px", display: 'flex' } },
    React.createElement(Joystick_1.Joystick, { followCursor: true, start: (0, addon_actions_1.action)("Started"), baseColor: 'grey', stickColor: 'black', throttle: 50, move: (0, addon_actions_1.action)("Moved"), stop: (0, addon_actions_1.action)("Stopped") }),
    React.createElement(Joystick_1.Joystick, { followCursor: true, start: (0, addon_actions_1.action)("Started"), baseColor: 'grey', stickColor: 'black', throttle: 50, move: (0, addon_actions_1.action)("Moved"), stop: (0, addon_actions_1.action)("Stopped") }))); });
joystickStories.add("Many follow Cursor", function () { return (React.createElement("div", { style: { padding: "50px", display: 'flex' } },
    React.createElement(Joystick_1.Joystick, { followCursor: true, start: (0, addon_actions_1.action)("Started"), baseColor: 'grey', stickColor: 'black', throttle: 50, move: (0, addon_actions_1.action)("Moved"), stop: (0, addon_actions_1.action)("Stopped") }),
    React.createElement(Joystick_1.Joystick, { followCursor: true, start: (0, addon_actions_1.action)("Started"), baseColor: 'grey', stickColor: 'black', throttle: 50, move: (0, addon_actions_1.action)("Moved"), stop: (0, addon_actions_1.action)("Stopped") }),
    React.createElement(Joystick_1.Joystick, { followCursor: true, start: (0, addon_actions_1.action)("Started"), baseColor: 'grey', stickColor: 'black', throttle: 50, move: (0, addon_actions_1.action)("Moved"), stop: (0, addon_actions_1.action)("Stopped") }),
    " ",
    React.createElement(Joystick_1.Joystick, { followCursor: true, start: (0, addon_actions_1.action)("Started"), baseColor: 'grey', stickColor: 'black', throttle: 50, move: (0, addon_actions_1.action)("Moved"), stop: (0, addon_actions_1.action)("Stopped") }),
    " ",
    React.createElement(Joystick_1.Joystick, { followCursor: true, start: (0, addon_actions_1.action)("Started"), baseColor: 'grey', stickColor: 'black', throttle: 50, move: (0, addon_actions_1.action)("Moved"), stop: (0, addon_actions_1.action)("Stopped") }),
    " ",
    React.createElement(Joystick_1.Joystick, { followCursor: true, start: (0, addon_actions_1.action)("Started"), baseColor: 'grey', stickColor: 'black', throttle: 50, move: (0, addon_actions_1.action)("Moved"), stop: (0, addon_actions_1.action)("Stopped") }),
    React.createElement(Joystick_1.Joystick, { followCursor: true, start: (0, addon_actions_1.action)("Started"), baseColor: 'grey', stickColor: 'black', throttle: 50, move: (0, addon_actions_1.action)("Moved"), stop: (0, addon_actions_1.action)("Stopped") }))); });
joystickStories.add("HUGE joystick", function () { return React.createElement(Joystick_1.Joystick, { start: (0, addon_actions_1.action)("Started"), move: (0, addon_actions_1.action)("Moved"), stop: (0, addon_actions_1.action)("Stopped"), size: 500 }); });
joystickStories.add("Tiny joystick", function () { return React.createElement(Joystick_1.Joystick, { start: (0, addon_actions_1.action)("Started"), move: (0, addon_actions_1.action)("Moved"), stop: (0, addon_actions_1.action)("Stopped"), size: 50 }); });
joystickStories.add("Disabled joystick", function () { return React.createElement(Joystick_1.Joystick, { start: (0, addon_actions_1.action)("Started"), move: (0, addon_actions_1.action)("Moved"), stop: (0, addon_actions_1.action)("Stopped"), disabled: true }); });
joystickStories.add("Controlling a react-parallax-tilt ", function () {
    var _a = (0, react_2.useState)([0, 0]), _b = _a[0], manualTiltAngleX = _b[0], manualTiltAngleY = _b[1], setManualTiltAngle = _a[1];
    var onMove = function (stick) {
        setManualTiltAngle([stick.y, stick.x]);
    };
    var onStop = function () {
        setManualTiltAngle([0, 0]);
    };
    return React.createElement(React.Fragment, null,
        React.createElement("div", { className: "tilt-manual-input" },
            React.createElement(react_parallax_tilt_1.default, { tiltAngleXManual: manualTiltAngleX, tiltAngleYManual: manualTiltAngleY, glareEnable: true },
                React.createElement("div", { className: "react-parallax-tilt" },
                    React.createElement("div", null,
                        "Axis x: ", manualTiltAngleX === null || manualTiltAngleX === void 0 ? void 0 :
                        manualTiltAngleX.toFixed(0),
                        "\u00B0"),
                    React.createElement("div", null,
                        "Axis y: ", manualTiltAngleY === null || manualTiltAngleY === void 0 ? void 0 :
                        manualTiltAngleY.toFixed(0),
                        "\u00B0"))),
            React.createElement("div", { className: "manual-input" },
                React.createElement(Joystick_1.Joystick, { baseColor: "darkgreen", stickColor: "black", move: onMove, stop: onStop })),
            React.createElement("h3", null,
                "Thanks to ",
                React.createElement("a", { href: "https://github.com/mkosir/react-parallax-tilt" }, "react-parallax-tilt"))));
});
var DirectionComponent = /** @class */ (function (_super) {
    __extends(DirectionComponent, _super);
    function DirectionComponent(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            direction: "Stopped"
        };
        return _this;
    }
    DirectionComponent.prototype._handleMove = function (data) {
        this.setState({
            direction: data.direction
        });
    };
    DirectionComponent.prototype._handleStop = function () {
        this.setState({
            direction: "Stopped"
        });
    };
    DirectionComponent.prototype.render = function () {
        return (React.createElement("div", null,
            React.createElement(Joystick_1.Joystick, { move: this._handleMove.bind(this), stop: this._handleStop.bind(this) }),
            React.createElement("p", null, this.state.direction)));
    };
    return DirectionComponent;
}(React.Component));
joystickStories.add("Default with direction text", function () { return React.createElement(DirectionComponent, null); });
var Modal = function (_a) {
    var isOpen = _a.isOpen;
    if (!isOpen)
        return null;
    return ReactDOM.createPortal(React.createElement(Joystick_1.Joystick, null), document.body);
};
joystickStories.add("Default with portal", function () {
    var _a = (0, react_2.useState)(false), isOpen = _a[0], setIsOpen = _a[1];
    return React.createElement(React.Fragment, null,
        React.createElement("button", { onClick: function () { return setIsOpen(!isOpen); } }, "Open"),
        React.createElement(Modal, { isOpen: isOpen }));
});
//# sourceMappingURL=Joystick.stories.js.map